# rename mean as proportion
return(phe_proportion)
}
phe_proportion(60,100)
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
rename(proportion = mean) %>%
select(x,n,proportion,lower,upper) * c(1,1,multiplier,multiplier,multiplier)
#mutate(method="wilson")
# rename mean as proportion
return(phe_proportion)
}
phe_proportion(60,100)
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
rename(proportion = mean) %>%
rename(lower = lower*multiplier)
#       select(x,n,proportion,lower,upper) * c(1,1,multiplier,multiplier,multiplier)
#mutate(method="wilson")
# rename mean as proportion
return(phe_proportion)
}
phe_proportion(60,100)
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
rename(proportion = mean) %>%
mutate(lower = lower*multiplier)
#       select(x,n,proportion,lower,upper) * c(1,1,multiplier,multiplier,multiplier)
#mutate(method="wilson")
# rename mean as proportion
return(phe_proportion)
}
phe_proportion(60,100)
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
rename(proportion = mean) %>%
mutate(proportion = proportion * multiplier)
mutate(lower = lower * multiplier)
mutate(upper = upper * multiplier)
return(phe_proportion)
}
phe_proportion(60,100)
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
rename(proportion = mean) %>%
mutate(proportion = proportion * multiplier) %>%
mutate(lower = lower * multiplier) %>%
mutate(upper = upper * multiplier)
return(phe_proportion)
}
phe_proportion(60,100)
phe_proportion(60,100,percentage=TRUE)
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
lower_nm <- "lower" & conf.level*100 & "cl"
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
rename(proportion = mean) %>%
rename(numerator = x) %>%
rename(denominator = n) %>%
rename(lower_nm = lower) %>%
mutate(proportion = proportion * multiplier) %>%
mutate(lower = lower * multiplier) %>%
mutate(upper = upper * multiplier)
return(phe_proportion)
}
phe_proportion(60,100,percentage=TRUE)
paste("lower",conf.level*100,"cl")
paste("lower",100,"cl")
?paste
paste("lower",100,"cl",sep=FALSE)
paste("lower",100,"cl",sep="")
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
lower_nm <- paste("lower",conf.level*100,"cl",sep="")
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
rename(proportion = mean) %>%
rename(numerator = x) %>%
rename(denominator = n) %>%
rename(lower_nm = lower) %>%
mutate(proportion = proportion * multiplier) %>%
mutate(lower = lower * multiplier) %>%
mutate(upper = upper * multiplier)
return(phe_proportion)
}
phe_proportion(60,100,percentage=TRUE)
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
lower_nm <- paste("lower",conf.level*100,"cl",sep=)
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
rename(proportion = mean) %>%
rename(numerator = x) %>%
rename(denominator = n) %>%
mutate(proportion = proportion * multiplier) %>%
mutate(lower = lower * multiplier) %>%
mutate(upper = upper * multiplier)
rename(lower_nm = lower) %>%
return(phe_proportion)
}
phe_proportion(60,100,percentage=TRUE)
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
lower_nm <- paste("lower",conf.level*100,"cl",sep=)
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
rename(proportion = mean) %>%
rename(numerator = x) %>%
rename(denominator = n) %>%
mutate(proportion = proportion * multiplier) %>%
mutate(lower = lower * multiplier) %>%
mutate(upper = upper * multiplier) %>%
rename(lower_nm = lower)
return(phe_proportion)
}
phe_proportion(60,100,percentage=TRUE)
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
#lower_nm <- paste("lower",conf.level*100,"cl",sep=)
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
rename(proportion = mean) %>%
rename(numerator = x) %>%
rename(denominator = n) %>%
mutate(proportion = proportion * multiplier) %>%
mutate(lower = lower * multiplier) %>%
mutate(upper = upper * multiplier) %>%
rename(paste("lower",conf.level*100,"cl",sep=) = lower)
return(phe_proportion)
}
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
# rename(paste("lower",conf.level*100,"cl",sep=) = lower)
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
rename(proportion = mean) %>%
rename(numerator = x) %>%
rename(denominator = n) %>%
mutate(proportion = proportion * multiplier) %>%
mutate(lower = lower * multiplier) %>%
mutate(upper = upper * multiplier) %>%
if (conf.level == 0.95) {
rename(lower95cl = lower)
} else if (conf.level == 0.998) {
rename(lower99.8cl = lower)
} else {
rename(lowercl = lower)
}
return(phe_proportion)
}
phe_proportion(60,100,percentage=TRUE)
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
# rename(paste("lower",conf.level*100,"cl",sep=) = lower)
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
rename(proportion = mean) %>%
rename(numerator = x) %>%
rename(denominator = n) %>%
mutate(proportion = proportion * multiplier) %>%
mutate(lower = lower * multiplier) %>%
mutate(upper = upper * multiplier)
if (conf.level == 0.95) {
phe_proportion <- rename(phe_proportion$lower95cl = phe_proportion$lower)
} else if (conf.level == 0.998) {
phe_proportion <- rename(phe_proportion$lower99.8cl = phe_proportion$lower)
} else {
phe_proportion <- rename(phe_proportion$lowercl = phe_proportion$lower)
}
return(phe_proportion)
}
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
# rename(paste("lower",conf.level*100,"cl",sep=) = lower)
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
rename(proportion = mean) %>%
rename(numerator = x) %>%
rename(denominator = n) %>%
mutate(proportion = proportion * multiplier) %>%
mutate(lower = lower * multiplier) %>%
mutate(upper = upper * multiplier)
if (conf.level == 0.95) {
rename(phe_proportion$lower95cl = phe_proportion$lower)
} else if (conf.level == 0.998) {
rename(phe_proportion$lower99.8cl = phe_proportion$lower)
} else {
rename(phe_proportion$lowercl = phe_proportion$lower)
}
return(phe_proportion)
}
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
# rename(paste("lower",conf.level*100,"cl",sep=) = lower)
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
rename(proportion = mean) %>%
rename(numerator = x) %>%
rename(denominator = n) %>%
mutate(proportion = proportion * multiplier) %>%
mutate(lower = lower * multiplier) %>%
mutate(upper = upper * multiplier)
if (conf.level = 0.95) {
rename(phe_proportion$lower95cl = phe_proportion$lower)
} else if (conf.level = 0.998) {
rename(phe_proportion$lower99.8cl = phe_proportion$lower)
} else {
rename(phe_proportion$lowercl = phe_proportion$lower)
}
return(phe_proportion)
}
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
# rename(paste("lower",conf.level*100,"cl",sep=) = lower)
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
rename(proportion = mean) %>%
rename(numerator = x) %>%
rename(denominator = n) %>%
mutate(proportion = proportion * multiplier) %>%
mutate(lower = lower * multiplier) %>%
mutate(upper = upper * multiplier)
#       if (conf.level = 0.95) {
#              rename(phe_proportion$lower95cl = phe_proportion$lower)
#        } else if (conf.level = 0.998) {
#              rename(phe_proportion$lower99.8cl = phe_proportion$lower)
#        } else {
#             rename(phe_proportion$lowercl = phe_proportion$lower)
#        }
return(phe_proportion)
}
phe_proportion(60,100,percentage=TRUE)
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
lower_nm <- paste("lower",conf.level*100,"cl",sep=)
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
rename(proportion = mean) %>%
rename(numerator = x) %>%
rename(denominator = n) %>%
mutate(proportion = proportion * multiplier) %>%
mutate(lower = lower * multiplier) %>%
mutate(upper = upper * multiplier) %>%
rename("lower_nm" = lower)
#       if (conf.level = 0.95) {
#              rename(phe_proportion$lower95cl = phe_proportion$lower)
#        } else if (conf.level = 0.998) {
#              rename(phe_proportion$lower99.8cl = phe_proportion$lower)
#        } else {
#             rename(phe_proportion$lowercl = phe_proportion$lower)
#        }
return(phe_proportion)
}
phe_proportion(60,100,percentage=TRUE)
names(phe_proportion)
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
lower_nm <- paste("lower",conf.level*100,"cl",sep=)
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
#     rename(proportion = mean) %>%
#      rename(numerator = x) %>%
#      rename(denominator = n) %>%
mutate(proportion = proportion * multiplier) %>%
mutate(lower = lower * multiplier) %>%
mutate(upper = upper * multiplier) %>%
rename("lower_nm" = lower)
names(phe_proportion) <- c("method","numerator","denominator","proportion",paste("lower",conf.level*100,"cl",sep=""),paste("upper",conf.level*100,"cl",sep=""))
#       if (conf.level = 0.95) {
#              rename(phe_proportion$lower95cl = phe_proportion$lower)
#        } else if (conf.level = 0.998) {
#              rename(phe_proportion$lower99.8cl = phe_proportion$lower)
#        } else {
#             rename(phe_proportion$lowercl = phe_proportion$lower)
#        }
return(phe_proportion)
}
phe_proportion(60,100,percentage=TRUE)
phe_proportion(60,100,percentage=TRUE)
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
lower_nm <- paste("lower",conf.level*100,"cl",sep=)
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
#     rename(proportion = mean) %>%
#      rename(numerator = x) %>%
#      rename(denominator = n) %>%
mutate(mean = mean * multiplier) %>%
mutate(lower = lower * multiplier) %>%
mutate(upper = upper * multiplier) %>%
rename("lower_nm" = lower)
names(phe_proportion) <- c("method","numerator","denominator","proportion",paste("lower",conf.level*100,"cl",sep=""),paste("upper",conf.level*100,"cl",sep=""))
#       if (conf.level = 0.95) {
#              rename(phe_proportion$lower95cl = phe_proportion$lower)
#        } else if (conf.level = 0.998) {
#              rename(phe_proportion$lower99.8cl = phe_proportion$lower)
#        } else {
#             rename(phe_proportion$lowercl = phe_proportion$lower)
#        }
return(phe_proportion)
}
phe_proportion(60,100,percentage=TRUE)
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
lower_nm <- paste("lower",conf.level*100,"cl",sep=)
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
#     rename(proportion = mean) %>%
#      rename(numerator = x) %>%
#      rename(denominator = n) %>%
mutate(mean = mean * multiplier) %>%
mutate(lower = lower * multiplier) %>%
mutate(upper = upper * multiplier) %>%
rename("lower_nm" = lower)
names(phe_proportion) <- c("method","numerator","denominator","proportion",paste("lower",conf.level*100,"cl",sep=""),paste("upper",conf.level*100,"cl",sep=""))
#       if (conf.level = 0.95) {
#              rename(phe_proportion$lower95cl = phe_proportion$lower)
#        } else if (conf.level = 0.998) {
#              rename(phe_proportion$lower99.8cl = phe_proportion$lower)
#        } else {
#             rename(phe_proportion$lowercl = phe_proportion$lower)
#        }
return(phe_proportion)
}
phe_proportion(60,100,percentage=TRUE)
phe_proportion(60,100,95,percentage=TRUE)
phe_proportion(60,100,0.01,percentage=TRUE)
phe_proportion(60,100,0,percentage=TRUE)
phe_proportion(60,100,1,percentage=TRUE)
phe_proportion(60,100,1.000001,percentage=TRUE)
