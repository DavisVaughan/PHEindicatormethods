data <- mutate(data,xrefpop_calc = x_ref,
nrefpop_calc = n_ref)
} else if (refpoptype == "field") {
enquoxref <- enquo(x_ref)
enquonref <- enquo(n_ref)
if (deparse(substitute(x_ref)) %in% colnames(data)) {
if(deparse(substitute(n_ref)) %in% colnames(data)) {
data <- mutate(data,xrefpop_calc = !!enquoxref,
nrefpop_calc = !!enquonref)
} else stop("n_ref is not a field name from data")
} else stop("x_ref is not a field name from data")
}
# apply quotes
x <- enquo(x)
n <- enquo(n)
# validate arguments
if (any(pull(data, !!x) < 0)) {
stop("numerators must all be greater than or equal to zero")
} else if (any(pull(data, !!n) <= 0)) {
stop("denominators must all be greater than zero")
} else if ((confidence<0.9)|(confidence >1 & confidence <90)|(confidence > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
} else if (!(type %in% c("value", "lower", "upper", "standard", "full"))) {
stop("type must be one of value, lower, upper, standard or full")
}
# scale confidence level
if (confidence >= 90) {
confidence <- confidence/100
}
phe_isr <- data %>%
mutate(exp_x = xrefpop_calc/nrefpop_calc * (!!n)) %>%
summarise(observed  = sum((!!x)),
expected  = sum(exp_x),
ref_rate = sum(xrefpop_calc) / sum(nrefpop_calc) * multiplier) %>%
mutate(value     = observed / expected * ref_rate,
lowercl = if_else(observed<10, qchisq((1-confidence)/2,2*observed)/2/expected * ref_rate,
byars_lower(observed,confidence)/expected * ref_rate),
uppercl = if_else(observed<10, qchisq(confidence+(1-confidence)/2,2*observed+2)/2/expected * ref_rate,
byars_upper(observed,confidence)/expected * ref_rate),
confidence = paste(confidence*100,"%", sep=""),
statistic = paste("isr per",format(multiplier,scientific=F)),
method  = if_else(observed<10,"Exact","Byars"))
if (type == "lower") {
phe_isr <- phe_isr %>%
select(-observed, -expected, -ref_rate, -value, -uppercl, -confidence, -statistic, -method)
} else if (type == "upper") {
phe_isr <- phe_isr %>%
select(-observed, -expected, -ref_rate, -value, -lowercl, -confidence, -statistic, -method)
} else if (type == "value") {
phe_isr <- phe_isr %>%
select(-observed, -expected, -ref_rate, -lowercl, -uppercl, -confidence, -statistic, -method)
} else if (type == "standard") {
phe_isr <- phe_isr %>%
select(-observed, -expected, -ref_rate, -confidence, -statistic, -method)
}
return(phe_isr)
}
expect_equal(data.frame(phe_isr(test_ISR_ownref, count, pop, test_ISR_ownref$refcount[1:19], test_ISR_ownref$refpop[1:19])),
data.frame(select(slice(test_ISR_results,1:3),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test default with own ref data as vector")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop,
x_ref = c(10303,2824,3225,3615,3641,3490,3789,3213,3031,2771,3089,3490,3595,4745,5514,7125,5694,6210,5757),
n_ref = c(50520,57173,60213,54659,44345,50128,62163,67423,62899,55463,60479,49974,44140,40888,37239,30819,18136,15325,13918))),
data.frame(select(slice(test_ISR_results,1:3),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test ref as specified vector")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="full")),
data.frame(select(slice(test_ISR_results,1:3),1:10)),
check.attributes=FALSE, check.names=FALSE,info="test full")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="value")),
data.frame(select(slice(test_ISR_results,1:3),1,5)),
check.attributes=FALSE, check.names=FALSE,info="test value")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="lower")),
data.frame(select(slice(test_ISR_results,1:3),1,6)),
check.attributes=FALSE, check.names=FALSE,info="test lower")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop,type="upper")),
data.frame(select(slice(test_ISR_results,1:3),1,7)),
check.attributes=FALSE, check.names=FALSE,info="test upper")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop,confidence = 0.998)),
data.frame(select(slice(test_ISR_results,4:6),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test confidence")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, multiplier=1000)),
data.frame(select(slice(test_ISR_results,7:9),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test multiplier")
#test calculations
test_that("isrs and CIs calculate correctly",{
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop)),
data.frame(select(slice(test_ISR_results,1:3),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test default")
expect_equal(data.frame(phe_isr(test_ISR_ownref, count, pop, refcount, refpop, refpoptype="field")),
data.frame(select(slice(test_ISR_results,1:3),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test default with own ref data by col name")
expect_equal(data.frame(phe_isr(test_ISR_ownref, count, pop, test_ISR_ownref$refcount[1:19], test_ISR_ownref$refpop[1:19])),
data.frame(select(slice(test_ISR_results,1:3),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test default with own ref data as vector")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop,
x_ref = c(10303,2824,3225,3615,3641,3490,3789,3213,3031,2771,3089,3490,3595,4745,5514,7125,5694,6210,5757),
n_ref = c(50520,57173,60213,54659,44345,50128,62163,67423,62899,55463,60479,49974,44140,40888,37239,30819,18136,15325,13918))),
data.frame(select(slice(test_ISR_results,1:3),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test ref as specified vector")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="full")),
data.frame(select(slice(test_ISR_results,1:3),1:10)),
check.attributes=FALSE, check.names=FALSE,info="test full")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="value")),
data.frame(select(slice(test_ISR_results,1:3),1,5)),
check.attributes=FALSE, check.names=FALSE,info="test value")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="lower")),
data.frame(select(slice(test_ISR_results,1:3),1,6)),
check.attributes=FALSE, check.names=FALSE,info="test lower")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop,type="upper")),
data.frame(select(slice(test_ISR_results,1:3),1,7)),
check.attributes=FALSE, check.names=FALSE,info="test upper")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop,confidence = 0.998)),
data.frame(select(slice(test_ISR_results,4:6),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test confidence")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, multiplier=1000)),
data.frame(select(slice(test_ISR_results,7:9),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test multiplier")
})
test_that("isrs - errors are generated when invalid arguments are used",{
expect_error(phe_isr(test_multiarea, count, pop),
"function phe_isr requires at least 5 arguments: data, x, n, x_ref and n_ref",info="error invalid number of arguments")
expect_error(phe_isr(test_err1, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
"numerators must all be greater than or equal to zero",info="error numerators < 0")
expect_error(phe_isr(test_err2, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
"denominators must all be greater than zero",info="error denominator = 0")
expect_error(phe_isr(test_err3, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
"denominators must all be greater than zero",info="error denominator < 0")
expect_error(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, confidence = 0.74),
"confidence level must be between 90 and 100 or between 0.9 and 1",info="error confidence < 0.9")
expect_error(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, confidence = 3),
"confidence level must be between 90 and 100 or between 0.9 and 1",info="error confidence between 1 and 90")
expect_error(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, confidence = 1000),
"confidence level must be between 90 and 100 or between 0.9 and 1",info="error confidence >100")
expect_error(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="combined"),
"type must be one of value, lower, upper, standard or full",info="error invalid type")
expect_error(phe_isr(filter(test_multiarea,count < 100), count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
"data must contain the same number of rows for each group",info="error num rows per group")
expect_error(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount[1:18], n_ref = test_ISR_refdata$refpop),
"x_ref length must equal number of rows in each group within data",info="error x_ref length")
expect_error(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop[2:19]),
"n_ref length must equal number of rows in each group within data",info="error n_ref length")
expect_error(phe_isr(test_ISR_ownref, count, pop, test_ISR_ownref$refcount, test_ISR_ownref$refpop[1:19]),
"x_ref length must equal number of rows in each group within data",info="error x_ref length in data")
expect_error(phe_isr(test_ISR_ownref, count, pop, test_ISR_ownref$refcount[1:19], test_ISR_ownref$refpop),
"n_ref length must equal number of rows in each group within data",info="error n_ref length in data")
})
phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop[2:19])
expect_error(phe_isr(test_multiarea, count, pop, test_ISR_ownref$refcount[1:19], test_ISR_ownref$refpop, refpoptype = "column"),
"valid values for refpoptype are vector and field",info="error invalid refpoptype")
expect_error(phe_isr(test_ISR_ownref, count, pop, ref_count, refpop, refpoptype = "field"),
"x_ref is not a field name from data",info="error x_ref not a fiel name")
expect_error(phe_isr(test_ISR_ownref, count, pop, refcount, ref_pop, refpoptype = "field"),
"n_ref is not a field name from data",info="error n_ref not a field name")
devtools::document()
devtools::document()
phe_smr <- function(data, x, n, x_ref, n_ref, refpoptype = "vector", type = "standard", confidence = 0.95, refvalue = 1) {
# check required arguments present
if (missing(data)|missing(x)|missing(n)|missing(x_ref)|missing(n_ref)) {
stop("function phe_smr requires at least 5 arguments: data, x, n, x_ref and n_ref")
}
# check same number of rows per group
if (n_distinct(select(ungroup(summarise(data,n=n())),n)) != 1) {
stop("data must contain the same number of rows for each group")
}
# check ref pops are valid and append to data
if (!(refpoptype %in% c("vector","field"))) {
stop("valid values for refpoptype are vector and field")
} else if (refpoptype == "vector") {
if (pull(slice(select(ungroup(summarise(data,n=n())),n),1)) != length(x_ref)) {
stop("x_ref length must equal number of rows in each group within data")
} else if (pull(slice(select(ungroup(summarise(data,n=n())),n),1)) != length(n_ref)) {
stop("n_ref length must equal number of rows in each group within data")
}
data <- mutate(data,xrefpop_calc = x_ref,
nrefpop_calc = n_ref)
} else if (refpoptype == "field") {
enquoxref <- enquo(x_ref)
enquonref <- enquo(n_ref)
if (deparse(substitute(x_ref)) %in% colnames(data)) {
if(deparse(substitute(n_ref)) %in% colnames(data)) {
data <- mutate(data,xrefpop_calc = !!enquoxref,
nrefpop_calc = !!enquonref)
} else stop("n_ref is not a field name from data")
} else stop("x_ref is not a field name from data")
}
# apply quotes
x <- enquo(x)
n <- enquo(n)
# validate arguments
if (any(pull(data, !!x) < 0)) {
stop("numerators must all be greater than or equal to zero")
} else if (any(pull(data, !!n) <= 0)) {
stop("denominators must all be greater than zero")
} else if ((confidence<0.9)|(confidence >1 & confidence <90)|(confidence > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
} else if (!(type %in% c("value", "lower", "upper", "standard", "full"))) {
stop("type must be one of value, lower, upper, standard or full")
}
# scale confidence level
if (confidence >= 90) {
confidence <- confidence/100
}
phe_smr <- data %>%
mutate(exp_x = xrefpop_calc/nrefpopcalc * (!!n)) %>%
summarise(observed  = sum((!!x)),
expected  = sum(exp_x)) %>%
mutate(value     = observed / expected * refvalue,
lowercl = if_else(observed<10, qchisq((1-confidence)/2,2*observed)/2/expected * refvalue,
byars_lower(observed,confidence)/expected * refvalue),
uppercl = if_else(observed<10, qchisq(confidence+(1-confidence)/2,2*observed+2)/2/expected * refvalue,
byars_upper(observed,confidence)/expected * refvalue),
confidence = paste(confidence*100,"%"),
statistic = paste("smr x ",format(ref,scientific=F)),
method  = if_else(observed<10,"Exact","Byars"))
if (type == "lower") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -value, -uppercl, -confidence, -statistic, -method)
} else if (type == "upper") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -value, -lowercl, -confidence, -statistic, -method)
} else if (type == "value") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -lowercl, -uppercl, -confidence, -statistic, -method)
} else if (type == "standard") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -confidence, -statistic, -method)
}
return(phe_smr)
}
expect_equal(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
select(slice(test_ISR_results,13:15),1,5:7),
check.attributes=FALSE, check.names=FALSE,info="test default")
phe_smr <- function(data, x, n, x_ref, n_ref, refpoptype = "vector", type = "standard", confidence = 0.95, refvalue = 1) {
# check required arguments present
if (missing(data)|missing(x)|missing(n)|missing(x_ref)|missing(n_ref)) {
stop("function phe_smr requires at least 5 arguments: data, x, n, x_ref and n_ref")
}
# check same number of rows per group
if (n_distinct(select(ungroup(summarise(data,n=n())),n)) != 1) {
stop("data must contain the same number of rows for each group")
}
# check ref pops are valid and append to data
if (!(refpoptype %in% c("vector","field"))) {
stop("valid values for refpoptype are vector and field")
} else if (refpoptype == "vector") {
if (pull(slice(select(ungroup(summarise(data,n=n())),n),1)) != length(x_ref)) {
stop("x_ref length must equal number of rows in each group within data")
} else if (pull(slice(select(ungroup(summarise(data,n=n())),n),1)) != length(n_ref)) {
stop("n_ref length must equal number of rows in each group within data")
}
data <- mutate(data,xrefpop_calc = x_ref,
nrefpop_calc = n_ref)
} else if (refpoptype == "field") {
enquoxref <- enquo(x_ref)
enquonref <- enquo(n_ref)
if (deparse(substitute(x_ref)) %in% colnames(data)) {
if(deparse(substitute(n_ref)) %in% colnames(data)) {
data <- mutate(data,xrefpop_calc = !!enquoxref,
nrefpop_calc = !!enquonref)
} else stop("n_ref is not a field name from data")
} else stop("x_ref is not a field name from data")
}
# apply quotes
x <- enquo(x)
n <- enquo(n)
# validate arguments
if (any(pull(data, !!x) < 0)) {
stop("numerators must all be greater than or equal to zero")
} else if (any(pull(data, !!n) <= 0)) {
stop("denominators must all be greater than zero")
} else if ((confidence<0.9)|(confidence >1 & confidence <90)|(confidence > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
} else if (!(type %in% c("value", "lower", "upper", "standard", "full"))) {
stop("type must be one of value, lower, upper, standard or full")
}
# scale confidence level
if (confidence >= 90) {
confidence <- confidence/100
}
phe_smr <- data %>%
mutate(exp_x = xrefpop_calc/nrefpop_calc * (!!n)) %>%
summarise(observed  = sum((!!x)),
expected  = sum(exp_x)) %>%
mutate(value     = observed / expected * refvalue,
lowercl = if_else(observed<10, qchisq((1-confidence)/2,2*observed)/2/expected * refvalue,
byars_lower(observed,confidence)/expected * refvalue),
uppercl = if_else(observed<10, qchisq(confidence+(1-confidence)/2,2*observed+2)/2/expected * refvalue,
byars_upper(observed,confidence)/expected * refvalue),
confidence = paste(confidence*100,"%"),
statistic = paste("smr x ",format(ref,scientific=F)),
method  = if_else(observed<10,"Exact","Byars"))
if (type == "lower") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -value, -uppercl, -confidence, -statistic, -method)
} else if (type == "upper") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -value, -lowercl, -confidence, -statistic, -method)
} else if (type == "value") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -lowercl, -uppercl, -confidence, -statistic, -method)
} else if (type == "standard") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -confidence, -statistic, -method)
}
return(phe_smr)
}
expect_equal(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
select(slice(test_ISR_results,13:15),1,5:7),
check.attributes=FALSE, check.names=FALSE,info="test default")
phe_smr <- function(data, x, n, x_ref, n_ref, refpoptype = "vector", type = "standard", confidence = 0.95, refvalue = 1) {
# check required arguments present
if (missing(data)|missing(x)|missing(n)|missing(x_ref)|missing(n_ref)) {
stop("function phe_smr requires at least 5 arguments: data, x, n, x_ref and n_ref")
}
# check same number of rows per group
if (n_distinct(select(ungroup(summarise(data,n=n())),n)) != 1) {
stop("data must contain the same number of rows for each group")
}
# check ref pops are valid and append to data
if (!(refpoptype %in% c("vector","field"))) {
stop("valid values for refpoptype are vector and field")
} else if (refpoptype == "vector") {
if (pull(slice(select(ungroup(summarise(data,n=n())),n),1)) != length(x_ref)) {
stop("x_ref length must equal number of rows in each group within data")
} else if (pull(slice(select(ungroup(summarise(data,n=n())),n),1)) != length(n_ref)) {
stop("n_ref length must equal number of rows in each group within data")
}
data <- mutate(data,xrefpop_calc = x_ref,
nrefpop_calc = n_ref)
} else if (refpoptype == "field") {
enquoxref <- enquo(x_ref)
enquonref <- enquo(n_ref)
if (deparse(substitute(x_ref)) %in% colnames(data)) {
if(deparse(substitute(n_ref)) %in% colnames(data)) {
data <- mutate(data,xrefpop_calc = !!enquoxref,
nrefpop_calc = !!enquonref)
} else stop("n_ref is not a field name from data")
} else stop("x_ref is not a field name from data")
}
# apply quotes
x <- enquo(x)
n <- enquo(n)
# validate arguments
if (any(pull(data, !!x) < 0)) {
stop("numerators must all be greater than or equal to zero")
} else if (any(pull(data, !!n) <= 0)) {
stop("denominators must all be greater than zero")
} else if ((confidence<0.9)|(confidence >1 & confidence <90)|(confidence > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
} else if (!(type %in% c("value", "lower", "upper", "standard", "full"))) {
stop("type must be one of value, lower, upper, standard or full")
}
# scale confidence level
if (confidence >= 90) {
confidence <- confidence/100
}
phe_smr <- data %>%
mutate(exp_x = xrefpop_calc/nrefpop_calc * (!!n)) %>%
summarise(observed  = sum((!!x)),
expected  = sum(exp_x)) %>%
mutate(value     = observed / expected * refvalue,
lowercl = if_else(observed<10, qchisq((1-confidence)/2,2*observed)/2/expected * refvalue,
byars_lower(observed,confidence)/expected * refvalue),
uppercl = if_else(observed<10, qchisq(confidence+(1-confidence)/2,2*observed+2)/2/expected * refvalue,
byars_upper(observed,confidence)/expected * refvalue),
confidence = paste(confidence*100,"%"),
statistic = paste("smr x ",format(refvalue,scientific=F)),
method  = if_else(observed<10,"Exact","Byars"))
if (type == "lower") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -value, -uppercl, -confidence, -statistic, -method)
} else if (type == "upper") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -value, -lowercl, -confidence, -statistic, -method)
} else if (type == "value") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -lowercl, -uppercl, -confidence, -statistic, -method)
} else if (type == "standard") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -confidence, -statistic, -method)
}
return(phe_smr)
}
expect_equal(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
select(slice(test_ISR_results,13:15),1,5:7),
check.attributes=FALSE, check.names=FALSE,info="test default")
View(test_ISR_results)
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop)),
data.frame(select(slice(test_ISR_results,13:15),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test default")
expect_equal(data.frame(phe_smr(test_ISR_ownref, count, pop, refcount, refpop, refpoptype="field")),
data.frame(select(slice(test_ISR_results,13:15),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test default with own ref data by col name")
expect_equal(data.frame(phe_smr(test_ISR_ownref, count, pop, test_ISR_ownref$refcount[1:19], test_ISR_ownref$refpop[1:19])),
data.frame(select(slice(test_ISR_results,13:15),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test default with own ref data as vector")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop,
x_ref = c(10303,2824,3225,3615,3641,3490,3789,3213,3031,2771,3089,3490,3595,4745,5514,7125,5694,6210,5757),
n_ref = c(50520,57173,60213,54659,44345,50128,62163,67423,62899,55463,60479,49974,44140,40888,37239,30819,18136,15325,13918))),
data.frame(select(slice(test_ISR_results,13:15),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test ref as specified vector")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="full")),
data.frame(select(slice(test_ISR_results,13:15),1:10)),
check.attributes=FALSE, check.names=FALSE,info="test full")
data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="full"))
data.frame(select(slice(test_ISR_results,13:15),1:10))
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="full")),
data.frame(select(slice(test_ISR_results,13:15),1:3,5:10)),
check.attributes=FALSE, check.names=FALSE,info="test full")
data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="full"))
data.frame(select(slice(test_ISR_results,13:15),1:3,5:10))
phe_smr <- function(data, x, n, x_ref, n_ref, refpoptype = "vector", type = "standard", confidence = 0.95, refvalue = 1) {
# check required arguments present
if (missing(data)|missing(x)|missing(n)|missing(x_ref)|missing(n_ref)) {
stop("function phe_smr requires at least 5 arguments: data, x, n, x_ref and n_ref")
}
# check same number of rows per group
if (n_distinct(select(ungroup(summarise(data,n=n())),n)) != 1) {
stop("data must contain the same number of rows for each group")
}
# check ref pops are valid and append to data
if (!(refpoptype %in% c("vector","field"))) {
stop("valid values for refpoptype are vector and field")
} else if (refpoptype == "vector") {
if (pull(slice(select(ungroup(summarise(data,n=n())),n),1)) != length(x_ref)) {
stop("x_ref length must equal number of rows in each group within data")
} else if (pull(slice(select(ungroup(summarise(data,n=n())),n),1)) != length(n_ref)) {
stop("n_ref length must equal number of rows in each group within data")
}
data <- mutate(data,xrefpop_calc = x_ref,
nrefpop_calc = n_ref)
} else if (refpoptype == "field") {
enquoxref <- enquo(x_ref)
enquonref <- enquo(n_ref)
if (deparse(substitute(x_ref)) %in% colnames(data)) {
if(deparse(substitute(n_ref)) %in% colnames(data)) {
data <- mutate(data,xrefpop_calc = !!enquoxref,
nrefpop_calc = !!enquonref)
} else stop("n_ref is not a field name from data")
} else stop("x_ref is not a field name from data")
}
# apply quotes
x <- enquo(x)
n <- enquo(n)
# validate arguments
if (any(pull(data, !!x) < 0)) {
stop("numerators must all be greater than or equal to zero")
} else if (any(pull(data, !!n) <= 0)) {
stop("denominators must all be greater than zero")
} else if ((confidence<0.9)|(confidence >1 & confidence <90)|(confidence > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
} else if (!(type %in% c("value", "lower", "upper", "standard", "full"))) {
stop("type must be one of value, lower, upper, standard or full")
}
# scale confidence level
if (confidence >= 90) {
confidence <- confidence/100
}
phe_smr <- data %>%
mutate(exp_x = xrefpop_calc/nrefpop_calc * (!!n)) %>%
summarise(observed  = sum((!!x)),
expected  = sum(exp_x)) %>%
mutate(value     = observed / expected * refvalue,
lowercl = if_else(observed<10, qchisq((1-confidence)/2,2*observed)/2/expected * refvalue,
byars_lower(observed,confidence)/expected * refvalue),
uppercl = if_else(observed<10, qchisq(confidence+(1-confidence)/2,2*observed+2)/2/expected * refvalue,
byars_upper(observed,confidence)/expected * refvalue),
confidence = paste(confidence*100,"%", sep=""),
statistic = paste("smr x ",format(refvalue,scientific=F)),
method  = if_else(observed<10,"Exact","Byars"))
if (type == "lower") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -value, -uppercl, -confidence, -statistic, -method)
} else if (type == "upper") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -value, -lowercl, -confidence, -statistic, -method)
} else if (type == "value") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -lowercl, -uppercl, -confidence, -statistic, -method)
} else if (type == "standard") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -confidence, -statistic, -method)
}
return(phe_smr)
}
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="full")),
data.frame(select(slice(test_ISR_results,13:15),1:3,5:10)),
check.attributes=FALSE, check.names=FALSE,info="test full")
data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="full"))
data.frame(select(slice(test_ISR_results,13:15),1:3,5:10))
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="value")),
data.frame(select(slice(test_ISR_results,13:15),1,5)),
check.attributes=FALSE, check.names=FALSE,info="test value")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="lower")),
data.frame(select(slice(test_ISR_results,13:15),1,6)),
check.attributes=FALSE, check.names=FALSE,info="test lower")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop,type="upper")),
data.frame(select(slice(test_ISR_results,13:15),1,7)),
check.attributes=FALSE, check.names=FALSE,info="test upper")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop,confidence = 0.998)),
data.frame(select(slice(test_ISR_results,16:18),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test confidence")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, multiplier=1000)),
data.frame(select(slice(test_ISR_results,19:21),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test multiplier")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop,confidence = 0.998)),
data.frame(select(slice(test_ISR_results,16:18),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test confidence")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, refvalue=100)),
data.frame(select(slice(test_ISR_results,19:21),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test refvalue")
devtools::install_git('https://gitlab.phe.gov.uk/packages/phecharts', build_vignettes=TRUE)
