lowercl = dsr + sqrt((vardsr/sum(x)))*(byars_lower(sum(x),0.95)-sum(x)) * 100000,
uppercl = dsr + sqrt((vardsr/sum(x)))*(byars_upper(sum(x),0.95)-sum(x)) * 100000) %>%
mutate(dsr     = if_else(sum(x) < 10,"NA",dsr),
lowercl = if_else(sum(x) < 10,"NA",lowercl),
uppercl = if_else(sum(x) < 10,"NA",uppercl)) %>%
mutate(method = "Dobson") %>%
select(groupref, total_count, total_pop, dsr, lowercl, uppercl, method)
phe_dsr <- data.frame(x=testdata_DSR_multiarea$count,
n=testdata_DSR_multiarea$pop,
stdpop=esp2013,
groupref=testdata_DSR_multiarea$area)
View(phe_dsr)
phe_dsr <- data.frame(x=testdata_DSR_multiarea$count,
n=testdata_DSR_multiarea$pop,
stdpop=esp2013,
groupref=testdata_DSR_multiarea$area) %>%
group_by(groupref) %>%
mutate(wt_rate = x * stdpop / n,
sq_rate = x * (stdpop/n)^2) %>%
summarise(total_count = sum(x),
total_pop = sum(n),
dsr = sum(wt_rate) / sum(stdpop) * 100000,
vardsr = 1/sum(stdpop)^2 * sum(sq_rate),
lowercl = dsr + sqrt((vardsr/sum(x)))*(byars_lower(sum(x),0.95)-sum(x)) * 100000,
uppercl = dsr + sqrt((vardsr/sum(x)))*(byars_upper(sum(x),0.95)-sum(x)) * 100000)
View(phe_dsr)
phe_dsr <- data.frame(x=testdata_DSR_multiarea$count,
n=testdata_DSR_multiarea$pop,
stdpop=esp2013,
groupref=testdata_DSR_multiarea$area) %>%
group_by(groupref) %>%
mutate(wt_rate = x * stdpop / n,
sq_rate = x * (stdpop/n)^2) %>%
summarise(total_count = sum(x),
total_pop = sum(n),
dsr = sum(wt_rate) / sum(stdpop) * 100000,
vardsr = 1/sum(stdpop)^2 * sum(sq_rate),
lowercl = dsr + sqrt((vardsr/sum(x)))*(byars_lower(sum(x),0.95)-sum(x)) * 100000,
uppercl = dsr + sqrt((vardsr/sum(x)))*(byars_upper(sum(x),0.95)-sum(x)) * 100000) %>%
mutate(dsr     = if_else(total_count < 10,"NA",dsr),
lowercl = if_else(total_count < 10,"NA",lowercl),
uppercl = if_else(total_count < 10,"NA",uppercl))
phe_dsr <- data.frame(x=testdata_DSR_multiarea$count,
n=testdata_DSR_multiarea$pop,
stdpop=esp2013,
groupref=testdata_DSR_multiarea$area) %>%
group_by(groupref) %>%
mutate(wt_rate = x * stdpop / n,
sq_rate = x * (stdpop/n)^2) %>%
summarise(total_count = sum(x),
total_pop = sum(n),
dsr = sum(wt_rate) / sum(stdpop) * 100000,
vardsr = 1/sum(stdpop)^2 * sum(sq_rate),
lowercl = dsr + sqrt((vardsr/sum(x)))*(byars_lower(sum(x),0.95)-sum(x)) * 100000,
uppercl = dsr + sqrt((vardsr/sum(x)))*(byars_upper(sum(x),0.95)-sum(x)) * 100000) %>%
mutate(dsr     = if_else(total_count < 10,NULL,dsr),
lowercl = if_else(total_count < 10,NULL,lowercl),
uppercl = if_else(total_count < 10,NULL,uppercl))
View(phe_dsr)
phe_dsr <- data.frame(x=testdata_DSR_multiarea$count,
n=testdata_DSR_multiarea$pop,
stdpop=esp2013,
groupref=testdata_DSR_multiarea$area) %>%
group_by(groupref) %>%
mutate(wt_rate = x * stdpop / n,
sq_rate = x * (stdpop/n)^2) %>%
summarise(total_count = sum(x),
total_pop = sum(n),
dsr = sum(wt_rate) / sum(stdpop) * 100000,
vardsr = 1/sum(stdpop)^2 * sum(sq_rate),
lowercl = if_else(sum(x)<10,"",dsr + sqrt((vardsr/sum(x)))*(byars_lower(sum(x),0.95)-sum(x)) * 100000),
uppercl = if_else(sum(x)<10,"",dsr + sqrt((vardsr/sum(x)))*(byars_upper(sum(x),0.95)-sum(x)) * 100000))
phe_dsr <- data.frame(x=testdata_DSR_multiarea$count,
n=testdata_DSR_multiarea$pop,
stdpop=esp2013,
groupref=testdata_DSR_multiarea$area) %>%
group_by(groupref) %>%
mutate(wt_rate = x * stdpop / n,
sq_rate = x * (stdpop/n)^2) %>%
summarise(total_count = sum(x),
total_pop = sum(n),
dsr = sum(wt_rate) / sum(stdpop) * 100000,
vardsr = 1/sum(stdpop)^2 * sum(sq_rate),
lowercl = if_else(total_count<10,"",dsr + sqrt((vardsr/sum(x)))*(byars_lower(sum(x),0.95)-sum(x)) * 100000),
uppercl = if_else(total_count<10,"",dsr + sqrt((vardsr/sum(x)))*(byars_upper(sum(x),0.95)-sum(x)) * 100000))
phe_dsr <- data.frame(x=testdata_DSR_multiarea$count,
n=testdata_DSR_multiarea$pop,
stdpop=esp2013,
groupref=testdata_DSR_multiarea$area) %>%
group_by(groupref) %>%
mutate(wt_rate = x * stdpop / n,
sq_rate = x * (stdpop/n)^2) %>%
summarise(total_count = sum(x),
total_pop = sum(n),
dsr = sum(wt_rate) / sum(stdpop) * 100000,
vardsr = 1/sum(stdpop)^2 * sum(sq_rate),
lowercl = dsr + sqrt((vardsr/sum(x)))*(byars_lower(sum(x),0.95)-sum(x)) * 100000,
uppercl = dsr + sqrt((vardsr/sum(x)))*(byars_upper(sum(x),0.95)-sum(x)) * 100000)
View(phe_dsr)
phe_dsr <- data.frame(x=testdata_DSR_multiarea$count,
n=testdata_DSR_multiarea$pop,
stdpop=esp2013,
groupref=testdata_DSR_multiarea$area) %>%
group_by(groupref) %>%
mutate(wt_rate = x * stdpop / n,
sq_rate = x * (stdpop/n)^2) %>%
summarise(total_count = sum(x),
total_pop = sum(n),
dsr = sum(wt_rate) / sum(stdpop) * 100000,
vardsr = 1/sum(stdpop)^2 * sum(sq_rate),
lowercl = dsr + sqrt((vardsr/sum(x)))*(byars_lower(sum(x),0.95)-sum(x)) * 100000,
uppercl = dsr + sqrt((vardsr/sum(x)))*(byars_upper(sum(x),0.95)-sum(x)) * 100000) %>%
mutate(dsr     = if_else(total_count < 10,-1,dsr),
lowercl = if_else(total_count < 10,-1,lowercl),
uppercl = if_else(total_count < 10,-1,uppercl))
View(phe_dsr)
phe_dsr <- data.frame(x=testdata_DSR_multiarea$count,
n=testdata_DSR_multiarea$pop,
stdpop=esp2013,
groupref=testdata_DSR_multiarea$area) %>%
group_by(groupref) %>%
mutate(wt_rate = x * stdpop / n,
sq_rate = x * (stdpop/n)^2) %>%
summarise(total_count = sum(x),
total_pop = sum(n),
dsr = sum(wt_rate) / sum(stdpop) * 100000,
vardsr = 1/sum(stdpop)^2 * sum(sq_rate),
lowercl = dsr + sqrt((vardsr/sum(x)))*(byars_lower(sum(x),0.95)-sum(x)) * 100000,
uppercl = dsr + sqrt((vardsr/sum(x)))*(byars_upper(sum(x),0.95)-sum(x)) * 100000) %>%
select(groupref, total_count, total_pop, dsr, lowercl, uppercl) %>%
mutate(dsr     = if_else(total_count < 10,-1,dsr),
lowercl = if_else(total_count < 10,-1,lowercl),
uppercl = if_else(total_count < 10,-1,uppercl)) %>%
mutate(method = "Dobson")
View(phe_dsr)
phe_dsr <- data.frame(x=testdata_DSR_multiarea$count,
n=testdata_DSR_multiarea$pop,
stdpop=esp2013,
groupref=testdata_DSR_multiarea$area) %>%
group_by(groupref) %>%
mutate(wt_rate = x * stdpop / n,
sq_rate = x * (stdpop/n)^2) %>%
summarise(total_count = sum(x),
total_pop = sum(n),
dsr = sum(wt_rate) / sum(stdpop) * 100000,
vardsr = 1/sum(stdpop)^2 * sum(sq_rate),
lowercl = dsr + sqrt((vardsr/sum(x)))*(byars_lower(sum(x),0.95)-sum(x)) * 100000,
uppercl = dsr + sqrt((vardsr/sum(x)))*(byars_upper(sum(x),0.95)-sum(x)) * 100000) %>%
select(groupref, total_count, total_pop, dsr, lowercl, uppercl) %>%
mutate(dsr     = if_else(total_count < 10,-1,dsr),
lowercl = if_else(total_count < 10,-1,lowercl),
uppercl = if_else(total_count < 10,-1,uppercl),
method  = if_else(total_count<10,"NA","Dobson")) %>%
# select(groupref, total_count, total_pop, dsr, lowercl, uppercl, method)
phe_dsr <- data.frame(x=testdata_DSR_multiarea$count,
n=testdata_DSR_multiarea$pop,
stdpop=esp2013,
groupref=testdata_DSR_multiarea$area) %>%
group_by(groupref) %>%
mutate(wt_rate = x * stdpop / n,
sq_rate = x * (stdpop/n)^2) %>%
summarise(total_count = sum(x),
total_pop = sum(n),
dsr = sum(wt_rate) / sum(stdpop) * 100000,
vardsr = 1/sum(stdpop)^2 * sum(sq_rate),
lowercl = dsr + sqrt((vardsr/sum(x)))*(byars_lower(sum(x),0.95)-sum(x)) * 100000,
uppercl = dsr + sqrt((vardsr/sum(x)))*(byars_upper(sum(x),0.95)-sum(x)) * 100000) %>%
select(groupref, total_count, total_pop, dsr, lowercl, uppercl) %>%
mutate(dsr     = if_else(total_count < 10,-1,dsr),
lowercl = if_else(total_count < 10,-1,lowercl),
uppercl = if_else(total_count < 10,-1,uppercl),
method  = if_else(total_count<10,"NA","Dobson"))
View(phe_dsr)
# -------------------------------------------------------------------------------------------------
#' Calculates a directly standardised rate with confidence limits using Dobson method.
#'
#' @param x the observed number of events for each standardisation category (eg ageband) within each group (eg area);
#'          numeric vector; no default
#' @param n the populations for each standardisation category (eg ageband) within each group (eg area);
#'          numeric vector; no default
#' @param stdpop the standard populations for each standardisation category
#'               (eg age band); numeric vector; no default; the European Standard Population 2013
#'              divided into 19 five-year agebands (0-4, 5-9, 10-14, .....90+) is available within the package
#' @param groupref the grouping sets (eg area codes or area names) if calculating multiple DSRs at once,
#'                 character vector, default = 1 (ie no grouping applied)
#' @param conf.level the required level of confidence expressed as a number between 0.9 and 1
#'                   or 90 and 100; numeric; default 0.95
#' @param multiplier the multiplier used to express the final values (eg 100,000 = rate per 100,000,
#'                   100 = percentage); numeric; default 100,000
#'
#' @export
#'
#' @return Returns a data frame of method, numerator, denominator, directly standardised rate
#'         and confidence interval limits
#'
#' @examples
#' phe_dsr(c(27,45,55,100,125,300,295,270,275,450,455,459,345,300,270,265,100,90,35),
#'         c(84935,80367,72122,79259,99806,87362,81579,71103,70001,
#'           69007,63203,52638,46087,40887,32604,28399,21625,13021,7355),conf.level = 0.998)
# -------------------------------------------------------------------------------------------------
# define the DSR function
phe_dsr <- function(x,n,stdpop, groupref = 1, conf.level = 0.95, multiplier = 100000) {
# validate arguments
if (any(x < 0)) {
stop("numerators must all be greater than or equal to zero")
} else if (any(n <= 0)) {
stop("denominators must all be greater than zero")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence level must be >= 90 and <= 100 (or >= 0.9 and <= 1)")
} else if (length(x) != length(n)) {
stop("numerator and denominator vectors must be of equal length")
} else if (length(x) %% length(stdpop) !=0) {
stop("numerator vector length must be a multiple of standard population vector length")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# calculate DSR and CIs
phe_dsr <- data.frame(x, n, stdpop, groupref) %>%
group_by(groupref) %>%
mutate(wt_rate = x * stdpop / n,
sq_rate = x * (stdpop/n)^2) %>%
summarise(total_count = sum(x),
total_pop = sum(n),
dsr = sum(wt_rate) / sum(stdpop) * multiplier,
vardsr = 1/sum(stdpop)^2 * sum(sq_rate),
lowercl = dsr + sqrt((vardsr/sum(x)))*(byars_lower(sum(x),conf.level)-sum(x)) * multiplier,
uppercl = dsr + sqrt((vardsr/sum(x)))*(byars_upper(sum(x),conf.level)-sum(x)) * multiplier) %>%
select(groupref, total_count, total_pop, dsr, lowercl, uppercl) %>%
mutate(dsr     = if_else(total_count < 10,"NA",dsr),
lowercl = if_else(total_count < 10,"NA",lowercl),
uppercl = if_else(total_count < 10,"NA",uppercl),
method  = if_else(total-count < 10,"NA - total_count <10","Dobson"))
names(phe_dsr) <- c("group", "total_count", "total_pop", "dsr",
paste("lower",conf.level*100,"cl",sep=""),
paste("upper",conf.level*100,"cl",sep=""),"method")
return(phe_dsr)
}
phe_dsr(testdata_DSR_multiarea$count, testdata_DSR_multiarea$pop, stdpop = esp2013,
groupref=testdata_DSR_multiarea$area, multiplier=10000)
phe_dsr <- function(x,n,stdpop, groupref = 1, conf.level = 0.95, multiplier = 100000) {
# validate arguments
if (any(x < 0)) {
stop("numerators must all be greater than or equal to zero")
} else if (any(n <= 0)) {
stop("denominators must all be greater than zero")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence level must be >= 90 and <= 100 (or >= 0.9 and <= 1)")
} else if (length(x) != length(n)) {
stop("numerator and denominator vectors must be of equal length")
} else if (length(x) %% length(stdpop) !=0) {
stop("numerator vector length must be a multiple of standard population vector length")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# calculate DSR and CIs
phe_dsr <- data.frame(x, n, stdpop, groupref) %>%
group_by(groupref) %>%
mutate(wt_rate = x * stdpop / n,
sq_rate = x * (stdpop/n)^2) %>%
summarise(total_count = sum(x),
total_pop = sum(n),
dsr = sum(wt_rate) / sum(stdpop) * multiplier,
vardsr = 1/sum(stdpop)^2 * sum(sq_rate),
lowercl = dsr + sqrt((vardsr/sum(x)))*(byars_lower(sum(x),conf.level)-sum(x)) * multiplier,
uppercl = dsr + sqrt((vardsr/sum(x)))*(byars_upper(sum(x),conf.level)-sum(x)) * multiplier) %>%
select(groupref, total_count, total_pop, dsr, lowercl, uppercl) %>%
mutate(dsr     = if_else(total_count < 10,-1,dsr),
lowercl = if_else(total_count < 10,-1,lowercl),
uppercl = if_else(total_count < 10,-1,uppercl),
method  = if_else(total-count < 10,"NA - total_count < 10","Dobson"))
names(phe_dsr) <- c("group", "total_count", "total_pop", "dsr",
paste("lower",conf.level*100,"cl",sep=""),
paste("upper",conf.level*100,"cl",sep=""),"method")
return(phe_dsr)
}
phe_dsr(testdata_DSR_multiarea$count, testdata_DSR_multiarea$pop, stdpop = esp2013,
groupref=testdata_DSR_multiarea$area, multiplier=10000)
phe_dsr <- function(x,n,stdpop, groupref = 1, conf.level = 0.95, multiplier = 100000) {
# validate arguments
if (any(x < 0)) {
stop("numerators must all be greater than or equal to zero")
} else if (any(n <= 0)) {
stop("denominators must all be greater than zero")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence level must be >= 90 and <= 100 (or >= 0.9 and <= 1)")
} else if (length(x) != length(n)) {
stop("numerator and denominator vectors must be of equal length")
} else if (length(x) %% length(stdpop) !=0) {
stop("numerator vector length must be a multiple of standard population vector length")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# calculate DSR and CIs
phe_dsr <- data.frame(x, n, stdpop, groupref) %>%
group_by(groupref) %>%
mutate(wt_rate = x * stdpop / n,
sq_rate = x * (stdpop/n)^2) %>%
summarise(total_count = sum(x),
total_pop = sum(n),
dsr = sum(wt_rate) / sum(stdpop) * multiplier,
vardsr = 1/sum(stdpop)^2 * sum(sq_rate),
lowercl = dsr + sqrt((vardsr/sum(x)))*(byars_lower(sum(x),conf.level)-sum(x)) * multiplier,
uppercl = dsr + sqrt((vardsr/sum(x)))*(byars_upper(sum(x),conf.level)-sum(x)) * multiplier) %>%
select(groupref, total_count, total_pop, dsr, lowercl, uppercl) %>%
mutate(dsr     = if_else(total_count < 10,-1,dsr),
lowercl = if_else(total_count < 10,-1,lowercl),
uppercl = if_else(total_count < 10,-1,uppercl),
method  = if_else(total_count < 10,"NA - total_count < 10","Dobson"))
names(phe_dsr) <- c("group", "total_count", "total_pop", "dsr",
paste("lower",conf.level*100,"cl",sep=""),
paste("upper",conf.level*100,"cl",sep=""),"method")
return(phe_dsr)
}
phe_dsr(testdata_DSR_multiarea$count, testdata_DSR_multiarea$pop, stdpop = esp2013,
groupref=testdata_DSR_multiarea$area, multiplier=10000)
phe_dsr(testdata_DSR_multiarea$count, testdata_DSR_multiarea$pop, stdpop = esp2013,
groupref=testdata_DSR_multiarea$area, multiplier=10000)
select(testdata_results,1:6)
testdata_DSR_small     <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testdata_small",     col_names=TRUE)
testdata_DSR_big       <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testdata_big",       col_names=TRUE)
View(testdata_DSR_big)
testdata_DSR_big       <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testdata_big",       col_names=TRUE)
testdata_DSR_small     <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testdata_small",     col_names=TRUE)
testdata_DSR_tiny      <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testdata_tiny",      col_names=TRUE)
testdata_DSR_multiarea <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testdata_multiarea", col_names=TRUE)
testdata_DSR_err1      <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testdata_err1",      col_names=TRUE)
testdata_DSR_err2      <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testdata_err2",      col_names=TRUE)
testdata_DSR_err3      <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testdata_err3",      col_names=TRUE)
testdata_DSR_multiarea_err <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testdata_multiarea_err",     col_names=TRUE)
testdata_DSR_1976      <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testdata_1976",     col_names=TRUE)
testdata_results       <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testresults",   col_names=TRUE)
?expect-equal
?expect_equal
expect_equal(phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop,
stdpop = esp2013,
groupref=testdata_DSR_multiarea$area,
multiplier=10000)[1:6],
select(testdata_results,1:6), check.attributes=FALSE, check.names=FALSE,info=1)
phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop,
stdpop = esp2013,
groupref=testdata_DSR_multiarea$area,
multiplier=10000)
testdata_results$group <- as.factor(testdata_results$group)
expect_equal(phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop,
stdpop = esp2013,
groupref=testdata_DSR_multiarea$area,
multiplier=10000)[1:6],
select(testdata_results,1:6), check.attributes=FALSE, check.names=FALSE,info=test1)
expect_equal(phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop,
stdpop = esp2013,
groupref=testdata_DSR_multiarea$area,
multiplier=10000)[1:6],
select(testdata_results,1:6), check.attributes=FALSE, check.names=FALSE,info="test1")
testdata_results       <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testresults",   col_names=TRUE)
testdata_results$group <- as.factor(testdata_results$group)
expect_equal(phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop,
stdpop = esp2013,
groupref=testdata_DSR_multiarea$area,
multiplier=10000)[1:6],
select(testdata_results,1:6), check.attributes=FALSE, check.names=FALSE,info="test1")
View(testdata_results)
phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop,
stdpop = esp2013,
groupref=testdata_DSR_multiarea$area,
multiplier=10000)
expect_equal(phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop,
stdpop = esp2013,
groupref=testdata_DSR_multiarea$area,
multiplier=10000)[1:6],
select(filter(testdata_results,group!="testdata_1976"),1:6), check.attributes=FALSE, check.names=FALSE,info="test1")
testdata_results       <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testresults",   col_names=TRUE)
testdata_results$group <- as.factor(testdata_results$group)
expect_equal(phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop,
stdpop = esp2013,
groupref=testdata_DSR_multiarea$area,
multiplier=10000)[1:6],
select(filter(testdata_results,group!="testdata_1976"),1:6), check.attributes=FALSE, check.names=FALSE,info="test1")
expect_equal(phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop,
stdpop = esp2013,
groupref=testdata_DSR_multiarea$area,
multiplier=10000)[1:6],
select(testdata_results,1:6), check.attributes=FALSE, check.names=FALSE,info="test1")
phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop,
stdpop = esp2013,
groupref=testdata_DSR_multiarea$area,
multiplier=10000)[1:6]
select(testdata_results,1:6)
data.frame(phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop,
stdpop = esp2013,
groupref=testdata_DSR_multiarea$area,
multiplier=10000)[1:6])
expect_equal(data.frame(phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop,
stdpop = esp2013,
groupref=testdata_DSR_multiarea$area,
multiplier=10000)[1:6]),
select(testdata_results,1:6), check.attributes=FALSE, check.names=FALSE,info="test1")
expect_equal(data.frame(phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop,
stdpop = esp2013,
groupref=testdata_DSR_multiarea$area,
multiplier=10000,
conf.level=0.998)[1:6]),
select(testdata_results,1,2,3,4,7,8), check.attributes=FALSE, check.names=FALSE,info="test2")
expect_equal(data.frame(phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop,
stdpop = esp2013,
groupref=testdata_DSR_multiarea$area,
multiplier=10000,
conf.level=95)[1:6]),
select(testdata_results,1:6), check.attributes=FALSE, check.names=FALSE,info="test3")
expect_equal(data.frame(phe_dsr(testdata_DSR_big$count,
testdata_DSR_big$pop,
stdpop = esp2013)[2:6]),
select(testdata_results,2:6)*c(1,1,10,10,10), check.attributes=FALSE, check.names=FALSE,info="test4")
data.frame(phe_dsr(testdata_DSR_big$count,
testdata_DSR_big$pop,
stdpop = esp2013)[2:6])
select(filter(testdata_results,1),2:6)*c(1,1,10,10,10)
View(testdata_results)
select(filter(testdata_results,group="testdata_big"),2:6)
filter(testdata_results,group=="testdata_big")
select(filter(testdata_results,group=="testdata_big"),2:6)
select(filter(testdata_results,group=="testdata_big"),2:6)*c(1,1,10,10,10)
expect_equal(data.frame(phe_dsr(testdata_DSR_big$count,
testdata_DSR_big$pop,
stdpop = esp2013)[2:6]),
select(filter(testdata_results,group=="testdata_big"),2:6)*c(1,1,10,10,10), check.attributes=FALSE, check.names=FALSE,info="test4")
expect_error(data.frame(phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop,
stdpop = esp2013,
groupref=testdata_DSR_multiarea$area)),
"numerators must all be greater than or equal to zero")
data.frame(phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop,
stdpop = esp2013,
groupref=testdata_DSR_multiarea$area))
expect_error(data.frame(phe_dsr(testdata_DSR_err1$count,
testdata_DSR_err1$pop,
stdpop = esp2013,
groupref=testdata_DSR_area)),
"numerators must all be greater than or equal to zero")
data.frame(phe_dsr(testdata_DSR_err2$count,
testdata_DSR_err2$pop,
stdpop = esp2013,
groupref=testdata_DSR_area))
expect_error(data.frame(phe_dsr(testdata_DSR_err2$count,
testdata_DSR_err2$pop,
stdpop = esp2013,
groupref=testdata_DSR_area)),
"denominators must all be greater than zero")
expect_error(data.frame(phe_dsr(testdata_DSR_err3$count,
testdata_DSR_err3$pop,
stdpop = esp2013,
groupref=testdata_DSR_area)),
"denominators must be greater than zero")
expect_error(data.frame(phe_dsr(testdata_DSR_err3$count,
testdata_DSR_err3$pop,
stdpop = esp2013,
groupref=testdata_DSR_area)),
"denominators must all be greater than zero")
expect_error(data.frame(phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop,
stdpop = esp2013,
groupref=testdata_DSR_multiarea$area,
conf.level=50)),
"confidence level must be >= 90 and <= 100 (or >= 0.9 and <= 1)")
testdata_DSR_multiarea_err <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testdata_multiarea_err",     col_names=TRUE)
View(testdata_DSR_multiarea_err)
testdata_DSR_multiarea$pop
testdata_DSR_multiarea$pop[1:30]
expect_error(data.frame(phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop[1:30],
stdpop = esp2013,
groupref=testdata_DSR_multiarea$area)),
"numerator and denominator vectors must be of equal length")
data.frame(phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop[1:30],
stdpop = esp2013,
groupref=testdata_DSR_multiarea$area))
View(testdata_DSR_1976)
testdata_DSR_1976$stdpop
data.frame(phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop[1:30],
stdpop = testdata_DSR_1976$stdpop,
groupref=testdata_DSR_multiarea$area))
data.frame(phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop,
stdpop = testdata_DSR_1976$stdpop,
groupref=testdata_DSR_multiarea$area))
expect_error(data.frame(phe_dsr(testdata_DSR_multiarea$count,
testdata_DSR_multiarea$pop,
stdpop = testdata_DSR_1976$stdpop,
groupref=testdata_DSR_multiarea$area)),
"numerator vector length must be a multiple of standard population vector length")
