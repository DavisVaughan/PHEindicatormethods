if (!(refpoptype %in% c("vector","field"))) {
stop("valid values for refpoptype are vector and field")
} else if (refpoptype == "vector") {
if (pull(slice(select(ungroup(summarise(data,n=n())),n),1)) != length(x_ref)) {
stop("x_ref length must equal number of rows in each group within data")
} else if (pull(slice(select(ungroup(summarise(data,n=n())),n),1)) != length(n_ref)) {
stop("n_ref length must equal number of rows in each group within data")
}
data <- mutate(data,xrefpop_calc = x_ref,
nrefpop_calc = n_ref)
} else if (refpoptype == "field") {
enquoxref <- enquo(x_ref)
enquonref <- enquo(n_ref)
if (deparse(substitute(x_ref)) %in% colnames(data)) {
if(deparse(substitute(n_ref)) %in% colnames(data)) {
data <- mutate(data,xrefpop_calc = !!enquoxref,
nrefpop_calc = !!enquonref)
} else stop("n_ref is not a field name from data")
} else stop("x_ref is not a field name from data")
}
# apply quotes
x <- enquo(x)
n <- enquo(n)
# validate arguments
if (any(pull(data, !!x) < 0)) {
stop("numerators must all be greater than or equal to zero")
} else if (any(pull(data, !!n) <= 0)) {
stop("denominators must all be greater than zero")
} else if ((confidence<0.9)|(confidence >1 & confidence <90)|(confidence > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
} else if (!(type %in% c("value", "lower", "upper", "standard", "full"))) {
stop("type must be one of value, lower, upper, standard or full")
}
# scale confidence level
if (confidence >= 90) {
confidence <- confidence/100
}
phe_smr <- data %>%
mutate(exp_x = xrefpop_calc/nrefpop_calc * (!!n)) %>%
summarise(observed  = sum((!!x)),
expected  = sum(exp_x)) %>%
mutate(value     = observed / expected * refvalue,
lowercl = if_else(observed<10, qchisq((1-confidence)/2,2*observed)/2/expected * refvalue,
byars_lower(observed,confidence)/expected * refvalue),
uppercl = if_else(observed<10, qchisq(confidence+(1-confidence)/2,2*observed+2)/2/expected * refvalue,
byars_upper(observed,confidence)/expected * refvalue),
confidence = paste(confidence*100,"%", sep=""),
statistic = paste("smr x ",format(refvalue,scientific=F)),
method  = if_else(observed<10,"Exact","Byars"))
if (type == "lower") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -value, -uppercl, -confidence, -statistic, -method)
} else if (type == "upper") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -value, -lowercl, -confidence, -statistic, -method)
} else if (type == "value") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -lowercl, -uppercl, -confidence, -statistic, -method)
} else if (type == "standard") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -confidence, -statistic, -method)
}
return(phe_smr)
}
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="full")),
data.frame(select(slice(test_ISR_results,13:15),1:3,5:10)),
check.attributes=FALSE, check.names=FALSE,info="test full")
data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="full"))
data.frame(select(slice(test_ISR_results,13:15),1:3,5:10))
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="value")),
data.frame(select(slice(test_ISR_results,13:15),1,5)),
check.attributes=FALSE, check.names=FALSE,info="test value")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="lower")),
data.frame(select(slice(test_ISR_results,13:15),1,6)),
check.attributes=FALSE, check.names=FALSE,info="test lower")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop,type="upper")),
data.frame(select(slice(test_ISR_results,13:15),1,7)),
check.attributes=FALSE, check.names=FALSE,info="test upper")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop,confidence = 0.998)),
data.frame(select(slice(test_ISR_results,16:18),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test confidence")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, multiplier=1000)),
data.frame(select(slice(test_ISR_results,19:21),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test multiplier")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop,confidence = 0.998)),
data.frame(select(slice(test_ISR_results,16:18),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test confidence")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, refvalue=100)),
data.frame(select(slice(test_ISR_results,19:21),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test refvalue")
devtools::install_git('https://gitlab.phe.gov.uk/packages/phecharts', build_vignettes=TRUE)
devtools::document()
library(dplyr)
install.packages("dplyr")
library(dplyr)
devtools::document()
library(rlang)
devtools::install_git("https://gitlab.phe.gov.uk/packages/phecharts",build_vignetts=TRUE)
#Load Libraries
library(PHEstatmethods)
library(tidyr)
library(rlang)
library(fingertipsR)
# Define precision
options(digits=22)
# Import Fingertips data
fdata <- fingertips_data(IndicatorID = 108,AreaTypeID = c(101,6)) %>%
filter(Timeperiod == "2014 - 16", AreaType %in% c("Region","District & UA")) %>%
select(Timeperiod, AreaCode, AreaName, Sex, Age, Denominator,
Count, Value, LowerCI95.0limit, UpperCI95.0limit, CategoryType, Category, Valuenote) %>%
mutate(Valuenote = replace(as.character(Valuenote), which(is.na(Valuenote)), "No note"),
Timeperiod = as.character(Timeperiod),
AreaCode = as.character(AreaCode),
AreaName = as.character(AreaName),
Sex = as.character(Sex),
Age = as.character(Age)) %>%
arrange(Timeperiod, AreaCode, Sex) %>%
distinct(Timeperiod, AreaCode, AreaName, Sex, Age, Denominator,
Count, Value, LowerCI95.0limit, UpperCI95.0limit, CategoryType, Category, Valuenote)
fdata <- fingertips_data(IndicatorID = 108,AreaTypeID = c(101,6))
rm(list=ls())
fdata <- fingertips_data(IndicatorID = 108,AreaTypeID = c(101,6))
View(fdata)
fdata <- fingertips_data(IndicatorID = 108,AreaTypeID = c(101,6)) %>%
filter(Timeperiod == "2014 - 16", AreaType %in% c("Region","District & UA"))
library(dplyr)
fdata <- fingertips_data(IndicatorID = 108,AreaTypeID = c(101,6)) %>%
filter(Timeperiod == "2014 - 16", AreaType %in% c("Region","District & UA"))
check <- filter(fdata,Category=NA)
check <- filter(fdata,Category==NA)
View(check)
check <- filter(fdata,is.na(Category))
View(check)
check <- filter(fdata,!is.na(Category))
fdata <- fingertips_data(IndicatorID = 108,AreaTypeID = c(101,6)) %>%
filter(Timeperiod == "2014 - 16",
AreaType %in% c("Region","District & UA"),
is.na(Category) = FALSE) %>%
select(Timeperiod, AreaCode, AreaName, Sex, Age, Denominator,
Count, Value, LowerCI95.0limit, UpperCI95.0limit)
fdata <- fingertips_data(IndicatorID = 108,AreaTypeID = c(101,6)) %>%
filter(Timeperiod == "2014 - 16",
AreaType %in% c("Region","District & UA"),
is.na(Category) = FALSE)
fdata <- fingertips_data(IndicatorID = 108,AreaTypeID = c(101,6)) %>%
filter(Timeperiod == "2014 - 16",
AreaType %in% c("Region","District & UA"),
!is.na(Category))
?is.na
fdata <- fingertips_data(IndicatorID = 108,AreaTypeID = c(101,6)) %>%
filter(Timeperiod == "2014 - 16",
AreaType %in% c("Region","District & UA"),
Category <= 0)
fdata <- fingertips_data(IndicatorID = 108,AreaTypeID = c(101,6)) %>%
filter(Timeperiod == "2014 - 16",
AreaType %in% c("Region","District & UA"))
is.na(Category)
is.na(fdata$Category)
fdata <- fingertips_data(IndicatorID = 108,AreaTypeID = c(101,6)) %>%
filter(Timeperiod == "2014 - 16",
is.NA(Category) == FALSE,
AreaType %in% c("Region","District & UA"))
fdata <- fingertips_data(IndicatorID = 108,AreaTypeID = c(101,6)) %>%
filter(Timeperiod == "2014 - 16",
#       is.NA(Category) == FALSE,
AreaType %in% c("Region","District & UA")) %>%
select(Timeperiod, AreaCode, AreaName, Sex, Age, Denominator,
Count, Value, LowerCI95.0limit, UpperCI95.0limit)
?na.rm
??na.rm
fdata <- fingertips_data(IndicatorID = 108,AreaTypeID = c(101,6)) %>%
filter(Timeperiod == "2014 - 16",
!is.NA(Category),
AreaType %in% c("Region","District & UA"))
fdata <- fingertips_data(IndicatorID = 108,AreaTypeID = c(101,6)) %>%
filter(Timeperiod == "2014 - 16",
!is.na(Category),
AreaType %in% c("Region","District & UA"))
fdata <- fingertips_data(IndicatorID = 108,AreaTypeID = c(101,6)) %>%
filter(Timeperiod == "2014 - 16",
AreaType %in% c("Region","District & UA"),
is.na(Category)) %>%
select(Timeperiod, AreaCode, AreaName, Sex, Age, Denominator,
Count, Value, LowerCI95.0limit, UpperCI95.0limit)
rm(list=ls())
data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="full"))
# Proportions
test_Prop   <- read_excel(".\\tests\\testthat\\testdata_Proportion.xlsx", sheet="testdata_Prop",   col_names=TRUE)
#Rates
test_Rate <- read_excel(".\\tests\\testthat\\testdata_Rate.xlsx", sheet="testdata_Rate", col_names=TRUE)
#Means
test_Mean         <- read_excel(".\\tests\\testthat\\testdata_Mean.xlsx", sheet="testdata_Mean",         col_names=TRUE)
test_Mean_results <- read_excel(".\\tests\\testthat\\testdata_Mean.xlsx", sheet="testdata_Mean_results", col_names=TRUE)
test_Mean_Grp <- group_by(test_Mean,area)
# DSRs, ISRs and SMRs
test_multiarea   <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_multiarea", col_names=TRUE) %>%
group_by(area)
test_DSR_1976    <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_1976",   col_names=TRUE)
test_err1        <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_err1",   col_names=TRUE)
test_err2        <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_err2",   col_names=TRUE) %>%
group_by(area)
test_err3        <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_err3",   col_names=TRUE)
test_DSR_results <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testresults_DSR", col_names=TRUE)
test_multigroup  <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_multigroup", col_names=TRUE) %>%
group_by(area,year)
test_ISR_results <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testresults_ISR", col_names=TRUE)
test_ISR_refdata <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="refdata",         col_names=TRUE)
test_ISR_ownref  <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_multiarea_ref", col_names=TRUE) %>%
group_by(area)
library(readxl)
library(testthat)
library(devtools)
# Proportions
test_Prop   <- read_excel(".\\tests\\testthat\\testdata_Proportion.xlsx", sheet="testdata_Prop",   col_names=TRUE)
#Rates
test_Rate <- read_excel(".\\tests\\testthat\\testdata_Rate.xlsx", sheet="testdata_Rate", col_names=TRUE)
#Means
test_Mean         <- read_excel(".\\tests\\testthat\\testdata_Mean.xlsx", sheet="testdata_Mean",         col_names=TRUE)
test_Mean_results <- read_excel(".\\tests\\testthat\\testdata_Mean.xlsx", sheet="testdata_Mean_results", col_names=TRUE)
test_Mean_Grp <- group_by(test_Mean,area)
# DSRs, ISRs and SMRs
test_multiarea   <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_multiarea", col_names=TRUE) %>%
group_by(area)
test_DSR_1976    <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_1976",   col_names=TRUE)
test_err1        <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_err1",   col_names=TRUE)
test_err2        <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_err2",   col_names=TRUE) %>%
group_by(area)
test_err3        <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_err3",   col_names=TRUE)
test_DSR_results <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testresults_DSR", col_names=TRUE)
test_multigroup  <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_multigroup", col_names=TRUE) %>%
group_by(area,year)
test_ISR_results <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testresults_ISR", col_names=TRUE)
test_ISR_refdata <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="refdata",         col_names=TRUE)
test_ISR_ownref  <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_multiarea_ref", col_names=TRUE) %>%
group_by(area)
data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="full"))
data.frame(select(slice(test_ISR_results,13:15),1:3,5:10))
debug(phe_smr)
phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="full")
paste("smr x ", format(ref, scientific = F))
paste("smr x ", ref)
paste("smr x ", left(ref))
undebug(phe_smr)
phe_smr <- function(data, x, n, x_ref, n_ref, refpoptype = "vector", type = "standard", confidence = 0.95, refvalue = 1) {
# check required arguments present
if (missing(data)|missing(x)|missing(n)|missing(x_ref)|missing(n_ref)) {
stop("function phe_smr requires at least 5 arguments: data, x, n, x_ref and n_ref")
}
# check same number of rows per group
if (n_distinct(select(ungroup(summarise(data,n=n())),n)) != 1) {
stop("data must contain the same number of rows for each group")
}
# check ref pops are valid and append to data
if (!(refpoptype %in% c("vector","field"))) {
stop("valid values for refpoptype are vector and field")
} else if (refpoptype == "vector") {
if (pull(slice(select(ungroup(summarise(data,n=n())),n),1)) != length(x_ref)) {
stop("x_ref length must equal number of rows in each group within data")
} else if (pull(slice(select(ungroup(summarise(data,n=n())),n),1)) != length(n_ref)) {
stop("n_ref length must equal number of rows in each group within data")
}
data <- mutate(data,xrefpop_calc = x_ref,
nrefpop_calc = n_ref)
} else if (refpoptype == "field") {
enquoxref <- enquo(x_ref)
enquonref <- enquo(n_ref)
if (deparse(substitute(x_ref)) %in% colnames(data)) {
if(deparse(substitute(n_ref)) %in% colnames(data)) {
data <- mutate(data,xrefpop_calc = !!enquoxref,
nrefpop_calc = !!enquonref)
} else stop("n_ref is not a field name from data")
} else stop("x_ref is not a field name from data")
}
# apply quotes
x <- enquo(x)
n <- enquo(n)
# validate arguments
if (any(pull(data, !!x) < 0)) {
stop("numerators must all be greater than or equal to zero")
} else if (any(pull(data, !!n) <= 0)) {
stop("denominators must all be greater than zero")
} else if ((confidence<0.9)|(confidence >1 & confidence <90)|(confidence > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
} else if (!(type %in% c("value", "lower", "upper", "standard", "full"))) {
stop("type must be one of value, lower, upper, standard or full")
}
# scale confidence level
if (confidence >= 90) {
confidence <- confidence/100
}
phe_smr <- data %>%
mutate(exp_x = xrefpop_calc/nrefpop_calc * (!!n)) %>%
summarise(observed  = sum((!!x)),
expected  = sum(exp_x)) %>%
mutate(value     = observed / expected * refvalue,
lowercl = if_else(observed<10, qchisq((1-confidence)/2,2*observed)/2/expected * refvalue,
byars_lower(observed,confidence)/expected * refvalue),
uppercl = if_else(observed<10, qchisq(confidence+(1-confidence)/2,2*observed+2)/2/expected * refvalue,
byars_upper(observed,confidence)/expected * refvalue),
confidence = paste(confidence*100,"%", sep=""),
statistic = paste("smr x ",format(refvalue,scientific=F)),
method  = if_else(observed<10,"Exact","Byars"))
if (type == "lower") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -value, -uppercl, -confidence, -statistic, -method)
} else if (type == "upper") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -value, -lowercl, -confidence, -statistic, -method)
} else if (type == "value") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -lowercl, -uppercl, -confidence, -statistic, -method)
} else if (type == "standard") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -confidence, -statistic, -method)
}
return(phe_smr)
}
debug(phe_smr)
phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="full")
paste("smr x ",format(refvalue,scientific=F))
paste("smr x ",format(refvalue,scientific=F), sep="")
undebug(phe_smr)
phe_smr <- function(data, x, n, x_ref, n_ref, refpoptype = "vector", type = "standard", confidence = 0.95, refvalue = 1) {
# check required arguments present
if (missing(data)|missing(x)|missing(n)|missing(x_ref)|missing(n_ref)) {
stop("function phe_smr requires at least 5 arguments: data, x, n, x_ref and n_ref")
}
# check same number of rows per group
if (n_distinct(select(ungroup(summarise(data,n=n())),n)) != 1) {
stop("data must contain the same number of rows for each group")
}
# check ref pops are valid and append to data
if (!(refpoptype %in% c("vector","field"))) {
stop("valid values for refpoptype are vector and field")
} else if (refpoptype == "vector") {
if (pull(slice(select(ungroup(summarise(data,n=n())),n),1)) != length(x_ref)) {
stop("x_ref length must equal number of rows in each group within data")
} else if (pull(slice(select(ungroup(summarise(data,n=n())),n),1)) != length(n_ref)) {
stop("n_ref length must equal number of rows in each group within data")
}
data <- mutate(data,xrefpop_calc = x_ref,
nrefpop_calc = n_ref)
} else if (refpoptype == "field") {
enquoxref <- enquo(x_ref)
enquonref <- enquo(n_ref)
if (deparse(substitute(x_ref)) %in% colnames(data)) {
if(deparse(substitute(n_ref)) %in% colnames(data)) {
data <- mutate(data,xrefpop_calc = !!enquoxref,
nrefpop_calc = !!enquonref)
} else stop("n_ref is not a field name from data")
} else stop("x_ref is not a field name from data")
}
# apply quotes
x <- enquo(x)
n <- enquo(n)
# validate arguments
if (any(pull(data, !!x) < 0)) {
stop("numerators must all be greater than or equal to zero")
} else if (any(pull(data, !!n) <= 0)) {
stop("denominators must all be greater than zero")
} else if ((confidence<0.9)|(confidence >1 & confidence <90)|(confidence > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
} else if (!(type %in% c("value", "lower", "upper", "standard", "full"))) {
stop("type must be one of value, lower, upper, standard or full")
}
# scale confidence level
if (confidence >= 90) {
confidence <- confidence/100
}
phe_smr <- data %>%
mutate(exp_x = xrefpop_calc/nrefpop_calc * (!!n)) %>%
summarise(observed  = sum((!!x)),
expected  = sum(exp_x)) %>%
mutate(value     = observed / expected * refvalue,
lowercl = if_else(observed<10, qchisq((1-confidence)/2,2*observed)/2/expected * refvalue,
byars_lower(observed,confidence)/expected * refvalue),
uppercl = if_else(observed<10, qchisq(confidence+(1-confidence)/2,2*observed+2)/2/expected * refvalue,
byars_upper(observed,confidence)/expected * refvalue),
confidence = paste(confidence*100,"%", sep=""),
statistic = paste("smr x ",format(refvalue,scientific=F), sep=""),
method  = if_else(observed<10,"Exact","Byars"))
if (type == "lower") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -value, -uppercl, -confidence, -statistic, -method)
} else if (type == "upper") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -value, -lowercl, -confidence, -statistic, -method)
} else if (type == "value") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -lowercl, -uppercl, -confidence, -statistic, -method)
} else if (type == "standard") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -confidence, -statistic, -method)
}
return(phe_smr)
}
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="full")),
data.frame(select(slice(test_ISR_results,13:15),1:3,5:10)),
check.attributes=FALSE, check.names=FALSE,info="test full")
#test calculations
test_that("smrs and CIs calculate correctly",{
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop)),
data.frame(select(slice(test_ISR_results,13:15),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test default")
expect_equal(data.frame(phe_smr(test_ISR_ownref, count, pop, refcount, refpop, refpoptype="field")),
data.frame(select(slice(test_ISR_results,13:15),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test default with own ref data by col name")
expect_equal(data.frame(phe_smr(test_ISR_ownref, count, pop, test_ISR_ownref$refcount[1:19], test_ISR_ownref$refpop[1:19])),
data.frame(select(slice(test_ISR_results,13:15),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test default with own ref data as vector")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop,
x_ref = c(10303,2824,3225,3615,3641,3490,3789,3213,3031,2771,3089,3490,3595,4745,5514,7125,5694,6210,5757),
n_ref = c(50520,57173,60213,54659,44345,50128,62163,67423,62899,55463,60479,49974,44140,40888,37239,30819,18136,15325,13918))),
data.frame(select(slice(test_ISR_results,13:15),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test ref as specified vector")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="full")),
data.frame(select(slice(test_ISR_results,13:15),1:3,5:10)),
check.attributes=FALSE, check.names=FALSE,info="test full")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="value")),
data.frame(select(slice(test_ISR_results,13:15),1,5)),
check.attributes=FALSE, check.names=FALSE,info="test value")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="lower")),
data.frame(select(slice(test_ISR_results,13:15),1,6)),
check.attributes=FALSE, check.names=FALSE,info="test lower")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop,type="upper")),
data.frame(select(slice(test_ISR_results,13:15),1,7)),
check.attributes=FALSE, check.names=FALSE,info="test upper")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop,confidence = 0.998)),
data.frame(select(slice(test_ISR_results,16:18),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test confidence")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, refvalue=100)),
data.frame(select(slice(test_ISR_results,19:21),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test refvalue")
})
test_that("smrs - errors are generated when invalid arguments are used",{
expect_error(phe_smr(test_multiarea, count, pop),
"function phe_smr requires at least 5 arguments: data, x, n, x_ref and n_ref",info="error invalid number of arguments")
expect_error(phe_smr(test_err1, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
"numerators must all be greater than or equal to zero",info="error numerators < 0")
expect_error(phe_smr(test_err2, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
"denominators must all be greater than zero",info="error denominator = 0")
expect_error(phe_smr(test_err3, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
"denominators must all be greater than zero",info="error denominator < 0")
expect_error(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, confidence = 0.74),
"confidence level must be between 90 and 100 or between 0.9 and 1",info="error confidence < 0.9")
expect_error(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, confidence = 3),
"confidence level must be between 90 and 100 or between 0.9 and 1",info="error confidence between 1 and 90")
expect_error(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, confidence = 1000),
"confidence level must be between 90 and 100 or between 0.9 and 1",info="error confidence >100")
expect_error(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="combined"),
"type must be one of value, lower, upper, standard or full",info="error invalid type")
expect_error(phe_smr(filter(test_multiarea,count < 100), count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
"data must contain the same number of rows for each group",info="error num rows per group")
expect_error(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount[1:18], n_ref = test_ISR_refdata$refpop),
"x_ref length must equal number of rows in each group within data",info="error x_ref length")
expect_error(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop[2:19]),
"n_ref length must equal number of rows in each group within data",info="error n_ref length")
expect_error(phe_smr(test_ISR_ownref, count, pop, test_ISR_ownref$refcount, test_ISR_ownref$refpop[1:19]),
"x_ref length must equal number of rows in each group within data",info="error x_ref length in data")
expect_error(phe_smr(test_ISR_ownref, count, pop, test_ISR_ownref$refcount[1:19], test_ISR_ownref$refpop),
"n_ref length must equal number of rows in each group within data",info="error n_ref length in data")
expect_error(phe_smr(test_multiarea, count, pop, test_ISR_ownref$refcount[1:19], test_ISR_ownref$refpop, refpoptype = "column"),
"valid values for refpoptype are vector and field",info="error invalid refpoptype")
expect_error(phe_smr(test_ISR_ownref, count, pop, ref_count, refpop, refpoptype = "field"),
"x_ref is not a field name from data",info="error x_ref not a fiel name")
expect_error(phe_smr(test_ISR_ownref, count, pop, refcount, ref_pop, refpoptype = "field"),
"n_ref is not a field name from data",info="error n_ref not a field name")
})
df <- data.frame(indicatorid = rep(c(1234, 5678, 91011, 121314), each = 19 * 2 * 5),
year = rep(2006:2010, each = 19 * 2),
sex = rep(rep(c("Male", "Female"), each = 19), 5),
obs = sample(200, 19 * 2 * 5 * 4, replace = TRUE),
pop = sample(10000:20000, 19 * 2 * 5 * 4, replace = TRUE))
df %>%
group_by(indicatorid, year, sex) %>%
phe_dsr(df,obs,pop)
View(df)
df %>%
group_by(indicatorid, year, sex)
document()
View(df)
df <- data.frame(indicatorid = rep(c(1234, 5678, 91011, 121314), each = 19 * 2 * 5),
year = rep(2006:2010, each = 19 * 2),
sex = rep(rep(c("Male", "Female"), each = 19), 5),
ageband = rep(c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90), times = 10)
obs = sample(200, 19 * 2 * 5 * 4, replace = TRUE),
pop = sample(10000:20000, 19 * 2 * 5 * 4, replace = TRUE))
df <- data.frame(indicatorid = rep(c(1234, 5678, 91011, 121314), each = 19 * 2 * 5),
year = rep(2006:2010, each = 19 * 2),
sex = rep(rep(c("Male", "Female"), each = 19), 5),
ageband = rep(c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90), times = 10),
obs = sample(200, 19 * 2 * 5 * 4, replace = TRUE),
pop = sample(10000:20000, 19 * 2 * 5 * 4, replace = TRUE))
View(df)
group_by(df,indicatorid, year, sex)
library(PHEststmethods)
library(PHEstatmethods)
df <- data.frame(indicatorid = rep(c(1234, 5678, 91011, 121314), each = 19 * 2 * 5),
year = rep(2006:2010, each = 19 * 2),
sex = rep(rep(c("Male", "Female"), each = 19), 5),
ageband = rep(c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90), times = 10)
obs = sample(200, 19 * 2 * 5 * 4, replace = TRUE),
pop = sample(10000:20000, 19 * 2 * 5 * 4, replace = TRUE))
df <- data.frame(indicatorid = rep(c(1234, 5678, 91011, 121314), each = 19 * 2 * 5),
year = rep(2006:2010, each = 19 * 2),
sex = rep(rep(c("Male", "Female"), each = 19), 5),
ageband = rep(c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90), times = 10),
obs = sample(200, 19 * 2 * 5 * 4, replace = TRUE),
pop = sample(10000:20000, 19 * 2 * 5 * 4, replace = TRUE))
df %>%
group_by(indicatorid,year,sex)
document()
