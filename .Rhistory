??full_join
compare <- full_join(output, PropTestData, by = c("x"="numerator","n"="denominator"))
library(dplyr)
compare <- full_join(output, PropTestData, by = c("x"="numerator","n"="denominator"))
View(compare)
output998 <- binom.wilson.CI(PropTestData$numerator,PropTestData$denominator, conf.level=0.998)
View(output998)
output95 <- binom.wilson.CI(PropTestData$numerator,PropTestData$denominator)
rm(output)
compare <- full_join(PropTestData, output95, by = c("numerator"="x","denominator"="n")) %>%
full_join(output998, by = c("numerator"="x","denominator"="n"))
View(compare)
View(output998)
output95 <- binom.wilson.CI(PropTestData$numerator,PropTestData$denominator) %>%
select(x, n, mean, lower, upper) %>%
rename(mean, replace = c("mean95","mean"))
output95 <- binom.wilson.CI(PropTestData$numerator,PropTestData$denominator) %>%
select(x, n, mean, lower, upper)
View(output95)
output95 <- binom.wilson.CI(PropTestData$numerator,PropTestData$denominator) %>%
select(x, n, mean, lower, upper) %>%
rename(mean, replace = c("mean","mean95"))
output95 <- binom.wilson.CI(PropTestData$numerator,PropTestData$denominator) %>%
select(x, n, mean, lower, upper) %>%
output998 <- binom.wilson.CI(PropTestData$numerator,PropTestData$denominator, conf.level=0.998) %>%
select(x, n, mean, lower, upper)
output95 <- binom.wilson.CI(PropTestData$numerator,PropTestData$denominator) %>%
select(x, n, mean, lower, upper)
output998 <- binom.wilson.CI(PropTestData$numerator,PropTestData$denominator, conf.level=0.998) %>%
select(x, n, mean, lower, upper)
compare <- full_join(PropTestData, output95, by = c("numerator"="x","denominator"="n")) %>%
full_join(output998, by = c("numerator"="x","denominator"="n"))
discreps <- subset(compare, proportion!=mean.x)
View(discreps)
discreps <- subset(compare, proportion==mean.x)
discreps <- subset(compare, proportion!=mean.x or proportion!=mean.y)
discreps <- subset(compare, proportion!=mean.x) %>%
subset(compare, proportion!=mean.y)
discreps <- subset(compare, proportion!=mean.x) %>%
bind_rows(subset(compare, proportion!=mean.y))
discreps <- subset(compare, proportion!=mean.x) %>%
bind_rows(subset(compare, proportion==mean.y))
discreps <- subset(compare, proportion==mean.x) %>%
bind_rows(subset(compare, proportion==mean.y))
discreps <- subset(compare, proportion!=mean.x) %>%
bind_rows(subset(compare, proportion!=mean.y)) %>%
bind_rows(subset(compare, "lower 95 CI"!=lower.x))
output95 <- binom.wilson.CI(PropTestData$numerator,PropTestData$denominator) %>%
select(x, n, mean, lower, upper)
output998 <- binom.wilson.CI(PropTestData$numerator,PropTestData$denominator, conf.level=0.998) %>%
select(x, n, mean, lower, upper)
compare <- full_join(PropTestData, output95, by = c("numerator"="x","denominator"="n")) %>%
full_join(output998, by = c("numerator"="x","denominator"="n"))
discreps <- subset(compare, proportion!=mean.x) %>%
bind_rows(subset(compare, proportion!=mean.y)) %>%
bind_rows(subset(compare, "lower 95 CI"!=lower.x)) %>%
bind_rows(subset(compare, "upper 95 CI"!=upper.x)) %>%
bind_rows(subset(compare, "lower 99.8 CI"!=lower.y)) %>%
bind_rows(subset(compare, "upper 99.8 CI"!=upper.y))
View(discreps)
discreps
discreps <- discreps %>%
bind_rows(subset(compare, proportion!=mean.x)) %>%
bind_rows(subset(compare, proportion!=mean.y)) %>%
bind_rows(subset(compare, "lower 95 CI"==lower.x)) %>%
bind_rows(subset(compare, "upper 95 CI"==upper.x)) %>%
bind_rows(subset(compare, "lower 99.8 CI"==lower.y)) %>%
bind_rows(subset(compare, "upper 99.8 CI"==upper.y))
PropTestData <- read_excel("ProportionTestData.xlsx", sheet=1, col_names=TRUE)
output95 <- binom.wilson.CI(PropTestData$numerator,PropTestData$denominator) %>%
select(x, n, mean, lower, upper)
output998 <- binom.wilson.CI(PropTestData$numerator,PropTestData$denominator, conf.level=0.998) %>%
select(x, n, mean, lower, upper)
compare <- full_join(PropTestData, output95, by = c("numerator"="x","denominator"="n")) %>%
full_join(output998, by = c("numerator"="x","denominator"="n"))
discreps <- discreps %>%
bind_rows(subset(compare, proportion!=mean.x)) %>%
bind_rows(subset(compare, proportion!=mean.y)) %>%
bind_rows(subset(compare, lower95CI==lower.x)) %>%
bind_rows(subset(compare, upper95CI==upper.x)) %>%
bind_rows(subset(compare, lower998CI==lower.y)) %>%
bind_rows(subset(compare, upper998CI==upper.y))
discreps
discreps <- discreps %>%
bind_rows(subset(compare, proportion!=mean.x))
rm(discreps)
discreps <- discreps %>%
bind_rows(subset(compare, proportion!=mean.x))
discreps <- bind_rows(subset(compare, proportion!=mean.x))
discreps <- bind_rows(subset(compare, proportion!=mean.x)) %>%
bind_rows(subset(compare, proportion!=mean.y))
discreps <- bind_rows(subset(compare, proportion!=mean.x)) %>%
bind_rows(subset(compare, proportion!=mean.y)) %>%
bind_rows(subset(compare, lower95CI==lower.x))
head(compare)
?round
discreps <- bind_rows(subset(compare, proportion!=mean.x)) %>%
bind_rows(subset(compare, proportion!=mean.y)) %>%
bind_rows(subset(compare, round(lower95CI,8)==round(lower.x,8))
rm(discreps)
rm(discreps)
discreps <- subset(compare, proportion!=mean.x) %>%
bind_rows(subset(compare, proportion!=mean.y)) %>%
bind_rows(subset(compare, round(lower95CI,4)==round(lower.x,4)))
discreps <- subset(compare, proportion!=mean.x) %>%
bind_rows(subset(compare, proportion!=mean.y)) %>%
bind_rows(subset(compare, round(lower95CI,4)!=round(lower.x,4)))
discreps <- subset(compare, proportion!=mean.x) %>%
bind_rows(subset(compare, proportion!=mean.y)) %>%
bind_rows(subset(compare, round(lower95CI,8)!=round(lower.x,8)))
discreps <- subset(compare, proportion != mean.x) %>%
bind_rows(subset(compare, proportion != mean.y)) %>%
bind_rows(subset(compare, lower95CI != lower.x,8)
discreps <- subset(compare, proportion != mean.x) %>%
bind_rows(subset(compare, proportion != mean.y)) %>%
bind_rows(subset(compare, lower95CI != lower.x))
discreps <- subset(compare, proportion != mean.x) %>%
bind_rows(subset(compare, proportion != mean.y)) %>%
bind_rows(subset(compare, lower95CI != lower.x))
rm(discreps)
discreps <- subset(compare, proportion != mean.x) %>%
bind_rows(subset(compare, proportion != mean.y)) %>%
bind_rows(subset(compare, lower95CI != lower.x))
rm(discreps)
discreps <- subset(compare, proportion != mean.x) %>%
bind_rows(subset(compare, proportion != mean.y)) %>%
bind_rows(subset(compare, round(lower95CI,20) != round(lower.x,20)))
discreps <- subset(compare, proportion != mean.x) %>%
bind_rows(subset(compare, proportion != mean.y)) %>%
bind_rows(subset(compare, round(lower95CI,10) != round(lower.x,10)))
discreps <- subset(compare, proportion != mean.x) %>%
bind_rows(subset(compare, proportion != mean.y)) %>%
bind_rows(subset(compare, round(lower95CI,8) != round(lower.x,8))) %>%
bind_rows(subset(compare, round(upper95CI,8) != round(upper.x,8))) %>%
bind_rows(subset(compare, round(lower998CI,8) != round(lower.y,8))) %>%
bind_rows(subset(compare, round(upper998CI,8) != round(upper.y,8)))
discreps
file.exists("~/.ssh/id_rsa.pub")
devtools::use_testthat()
View(compare)
View(output95)
?testthat
??testthat
binom.confint(-2,10)
library(binom)
binom.confint(-2,10)
PHEbinom <- function(x, n, conf.level=0.95) {
if (x > n) {
stop("numerator must be less than or equal to denominator")
}
PHEbinom <- binom.confint(x, n, conf.level, methods="wilson")
return(PHEbinom)
}
rm(ls=list())
rm(list=ls())
PHEbinom <- function(x, n, conf.level=0.95) {
if (x > n) {
stop("numerator must be less than or equal to denominator")
}
PHEbinom <- binom.confint(x, n, conf.level, methods="wilson")
return(PHEbinom)
}
rm(list=ls())
phe.binom <- function(x, n, conf.level=0.95) {
if (x > n) {
stop("numerator must be less than or equal to denominator")
}
phe.binom <- binom.confint(x, n, conf.level, methods="wilson")
return(PHEbinom)
}
phe.binom(100,65)
phe.binom(100,-10)
phe.binom(-100,10)
phe.binom <- function(x, n, conf.level=0.95) {
phe.binom2 <- binom.confint(x, n, conf.level, methods="wilson")
return(PHEbinom)
}
phe.binom2 <- function(x, n, conf.level=0.95) {
phe.binom2 <- binom.confint(x, n, conf.level, methods="wilson")
return(PHEbinom)
}
phe.binom <- function(x, n, conf.level=0.95) {
phe.binom2 <- binom.confint(x, n, conf.level, methods="wilson")
return(PHEbinom)
}
phe.binom(100,65)
phe.binom(-65,-100)
rm(list=ls())
phe.binom <- function(x, n, conf.level=0.95) {
if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
phe.binom <- binom.confint(x, n, conf.level, methods="wilson")
return(PHEbinom)
}
phe.binom <- function(x, n, conf.level=0.95) {
if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
phe.binom <- binom.confint(x, n, conf.level, methods="wilson")
return(PHE.binom)
}
phe.binom(-65,-100)
phe.binom(-100,-65)
phe.binom(65,100,conf.int=0.5)
phe.binom(65,100,conf.int=0.95)
phe.binom(65,100,conf.level=0.95)
phe.binom(65,100,conf.level=0.95)
phe.binom <- function(x, n, conf.level=0.95) {
if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
} else if (x<0) {
stop("numerator must be greater than zero")
} else if (n<0) {
stop("denominator must be greater than zero")
}
phe.binom <- binom.confint(x, n, conf.level, methods="wilson")
return(PHE.binom)
}
phe.binom(65,100,conf.level=0.95)
phe.binom <- function(x, n, conf.level=0.95) {
if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
} else if (x<0) {
stop("numerator must be greater than zero")
} else if (n<0) {
stop("denominator must be greater than zero")
}
phe.binom <- binom.confint(x, n, conf.level, methods="wilson")
return(phe.binom)
}
phe.binom(65,100,conf.level=0.95)
phe.binom(65,100,conf.level=0.5)
phe.binom(65,-100,conf.level=0.5)
phe.binom(-65,100,conf.level=0.5)
phe.binom <- function(x, n, conf.level=0.95) {
if (x<0) {
stop("numerator must be greater than zero")
} else if (n<0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
}
phe.binom <- binom.confint(x, n, conf.level, methods="wilson")
return(phe.binom)
}
phe.binom(0,100,conf.level=0.5)
phe.binom(0,0,conf.level=0.5)
phe.binom(65.2,100.87,conf.level=0.5)
phe.binom(0.1,0.2,conf.level=0.5)
phe.binom <- function(x, n, conf.level=0.95, max=1) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
} else if (!(max %in% c(1,100))) {
stop("max must be equal to 1 or 100")
}
phe.binom <- binom.confint(x, n, conf.level, methods="wilson") * c(1,1,max,max,max)
return(phe.binom)
}
phe.binom(0.1,0.2,conf.level=0.5)
phe.binom <- function(x, n, conf.level=0.95, max=1) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
} else if (!(max %in% c(1,100))) {
stop("max must be equal to 1 or 100")
}
phe.binom <- binom.confint(x, n, conf.level, methods="wilson") * c(NA,1,1,max,max,max)
return(phe.binom)
}
phe.binom(0.1,0.2,conf.level=0.5)
str(phe.binom)
test <- phe.binom(0.1,0.2,conf.level=0.5)
phe.binom(0.1,0.2)
phe.binom <- function(x, n, conf.level=0.95, max=1) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
} else if (!(max %in% c(1,100))) {
stop("max must be equal to 1 or 100")
}
phe.binom <- binom.confint(x, n, conf.level, methods="wilson")
return(phe.binom)
}
phe.binom(65,100)
check <- phe.binom(65,100)
check
View(check)
str(check)
phe.binom <- function(x, n, conf.level=0.95, max=1) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
} else if (!(max %in% c(1,100))) {
stop("max must be equal to 1 or 100")
}
phe.binom <- binom.confint(x, n, conf.level, methods="wilson") %>%
select(x,n,mean,lower,upper) * c(1,1,max,max,max)
return(phe.binom)
}
check <- phe.binom(65,100)
library(dplyr)
check <- phe.binom(65,100)
View(check)
check <- phe.binom(65,100,100)
check <- phe.binom(65,100,max=100)
phe.binom <- function(x, n, conf.level=0.95, max=1) {
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if (x > n) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
} else if (!(max %in% c(1,100))) {
stop("function phe.binom can only output a proportion (max=1) or a percentage (max=100)")
}
phe.binom <- binom.confint(x, n, conf.level, methods="wilson") %>%
select(x,n,mean,lower,upper) * c(1,1,max,max,max) %>%
mutate(method="wilson")
return(phe.binom)
}
phe.binom(65,100,max=100)
del .git\index.lock
cd "H:/R/Projects/PHEstatmethods/.git"
install.packages("git2r")
library(testthat)
library(PHEstatmethods)
??test_check
install.packages("ems")
library(ems)
SMR(127,130,digits=8,ci.method="Byar",ci.level=0.95)
data(icu)
icu
head(icu)
SMR(icu$UnitDischargeName, icu$Saps3DeathProbabilityStandardEquation)
View(icu)
install.packages("epitools")
library(epitools)
rm(icu)
View(check)
View(test)
rm(test)
rm(check)
DSR_testdata <- read_excel("DSR_TestData.xlsx", sheet=1, col_names=TRUE)
library(readxl)
DSR_testdata <- read_excel("DSR_TestData.xlsx", sheet=1, col_names=TRUE)
??read_excel
DSR_testdata <- read_excel("\tests\testthat\DSR_TestData.xlsx", sheet=1, col_names=TRUE)
DSR_testdata <- read_excel("\\PHE.gov.uk\HD\S103TH_02\R\Projects\PHEstatmethods\tests\testthat\DSR_TestData.xlsx", sheet=1, col_names=TRUE)
DSR_testdata <- read_excel("DSR_TestData.xlsx", sheet=1, col_names=TRUE)
View(DSR_testdata)
ageadjust.direct(DSR_testdata$count, DSR_testdata$pop, rate = NULL, DSR_testdata$stdpop, conf.level = 0.95)
??ageadjust.direct
library(epitools)
library(readxl)
DSR_testdata1 <- read_excel("DSR_TestData.xlsx", sheet="testdata1", col_names=TRUE)
DSR_testdata_small <- read_excel("DSR_TestData.xlsx", sheet="testdata_small", col_names=TRUE)
DSR_testdata_big <- read_excel("DSR_TestData.xlsx", sheet="testdata_big", col_names=TRUE)
ageadjust.direct(DSR_testdata_small$count, DSR_testdata_small$pop, rate = NULL, DSR_testdata_small$stdpop, conf.level = 0.95)
ageadjust.direct(DSR_testdata_big$count, DSR_testdata_big$pop, rate = NULL, DSR_testdata_big$stdpop, conf.level = 0.95)
DSR_testdata_big <- read_excel("DSR_TestData.xlsx", sheet=3, col_names=TRUE)
ageadjust.direct(DSR_testdata_big$count, DSR_testdata_big$pop, rate = NULL, DSR_testdata_big$stdpop, conf.level = 0.95)
?data.frame
esp2013 <- data.frame(x=c("0-4",  "5-9",  "0-14", "15-19","20-24","25-29","30-34","35-39","40-44",
"45-49","50-54","55-69","60-64","65-69","70-74","75-79","80-84","85-89","90+"),
y=c(5,000,5,500,5,500,5,500,6,000,6,000,6,500,7,000,7,000,7,000,7,000,6,500,6,000,
5,500,5,000,4,000,2,500,1,500,1,000))
View(esp2013)
esp2013 <- data.frame(x=c("0-4",  "5-9",  "0-14", "15-19","20-24","25-29","30-34","35-39","40-44",
"45-49","50-54","55-69","60-64","65-69","70-74","75-79","80-84","85-89","90+"),
y=c(5000,5500,5500,5500,6000,6000,6500,7000,7000,7000,7000,6500,6000,
5500,5000,4000,2500,1500,1000))
View(esp2013)
esp2013 <- data.frame(ageband=c("0-4",  "5-9",  "0-14", "15-19","20-24","25-29","30-34","35-39","40-44",
"45-49","50-54","55-69","60-64","65-69","70-74","75-79","80-84","85-89","90+"),
stdpop=c(5000,5500,5500,5500,6000,6000,6500,7000,7000,7000,7000,6500,6000,
5500,5000,4000,2500,1500,1000))
View(esp2013)
ageadjust.direct(DSR_testdata$count, DSR_testdata$pop, rate = NULL, DSR_testdata$stdpop, conf.level = 0.95)
phe_dasr <- ageadjust.direct(O, n, stdpop = esp2013, conf.level = 0.95, multiplier = 100000)
phe_dasr <- ageadjust.direct(O, n, rate = NULL, stdpop = esp2013, conf.level = 0.95)
ageadjust.direct(DSR_testdata$count, DSR_testdata$pop, rate = NULL, DSR_testdata$stdpop, conf.level = 0.95)
phe_dasr <- function(O, n, rate = NULL, stdpop = esp2013, conf.level=0.95, multiplier=100000) {
#  if (x < 0) {
#    stop("numerator must be greater than or equal to zero")
#  } else if (n <= 0) {
#    stop("denominator must be greater than zero")
#  } else if (x > n) {
#    stop("numerator must be less than or equal to denominator for a proportion statistic")
#  } else if (!(max %in% c(1,100))) {
#    stop("function phe_proportion can only output a proportion (max=1) or a percentage (max=100)")
#  }
# stop if count <10
phe_dasr <- ageadjust.direct(O, n, rate = NULL, stdpop = esp2013, conf.level = 0.95) %>%
# select(x,n,mean,lower,upper) * c(1,1,max,max,max) %>%
# define correct CI - Dobson method = byars for O >= 100 or exact method below?
#    mutate(method="wilson")
return(phe_dasr)
}
View(DSR_testdata_big)
phe_dasr(DSR_testdata_big$count, DSR_testdata_big$pop)
library(dplyr)
phe_dasr(DSR_testdata_big$count, DSR_testdata_big$pop)
phe_dasr(DSR_testdata_big$count, DSR_testdata_big$pop)
testdata <- select(DSR_testdata_big,[2,3,4])
testdata <- select(DSR_testdata_big,count, pop, stdpop)
View(testdata)
phe_dasr(testdata$count, testdata$pop)
View(esp2013)
phe_dasr <- function(O, n, rate = NULL, stdpop = esp2013, conf.level=0.95, multiplier=100000) {
#  if (x < 0) {
#    stop("numerator must be greater than or equal to zero")
#  } else if (n <= 0) {
#    stop("denominator must be greater than zero")
#  } else if (x > n) {
#    stop("numerator must be less than or equal to denominator for a proportion statistic")
#  } else if (!(max %in% c(1,100))) {
#    stop("function phe_proportion can only output a proportion (max=1) or a percentage (max=100)")
#  }
# stop if count <10
phe_dasr <- ageadjust.direct(O, n, rate = NULL, stdpop = esp2013$stdpop, conf.level = 0.95) %>%
# select(x,n,mean,lower,upper) * c(1,1,max,max,max) %>%
# define correct CI - Dobson method = byars for O >= 100 or exact method below?
#    mutate(method="wilson")
return(phe_dasr)
}
phe_dasr(DSR_testdata_big$count, DSR_testdata_big$pop)
phe_dasr(DSR_testdata_big$count, DSR_testdata_big$pop)
phe_dasr <- function(O, n, rate = NULL, stdpop = esp2013, conf.level=0.95, multiplier=100000) {
#  if (x < 0) {
#    stop("numerator must be greater than or equal to zero")
#  } else if (n <= 0) {
#    stop("denominator must be greater than zero")
#  } else if (x > n) {
#    stop("numerator must be less than or equal to denominator for a proportion statistic")
#  } else if (!(max %in% c(1,100))) {
#    stop("function phe_proportion can only output a proportion (max=1) or a percentage (max=100)")
#  }
# stop if count <10
phe_dasr <- ageadjust.direct(O, n, rate = NULL, stdpop = esp2013$stdpop, conf.level = 0.95)
# select(x,n,mean,lower,upper) * c(1,1,max,max,max) %>%
# define correct CI - Dobson method = byars for O >= 100 or exact method below?
#    mutate(method="wilson")
return(phe_dasr)
}
phe_dasr(DSR_testdata_big$count, DSR_testdata_big$pop)
rm testdata
rm(DSR_testdata)
rm(testdata)
?confint
?byar
?byars
?Byars
phe_dasr <- function(O, n, rate = NULL, stdpop = esp2013, conf.level=0.95, multiplier=100000) {
#  if (x < 0) {
#    stop("numerator must be greater than or equal to zero")
#  } else if (n <= 0) {
#    stop("denominator must be greater than zero")
#  } else if (x > n) {
#    stop("numerator must be less than or equal to denominator for a proportion statistic")
#  } else if (!(max %in% c(1,100))) {
#    stop("function phe_proportion can only output a proportion (max=1) or a percentage (max=100)")
#  }
# stop if count <10
phe_dasr <- ageadjust.direct(O, n, rate = NULL, stdpop = esp2013$stdpop, conf.level = 0.95) %?%
# define correct CI separately if this not accurate enough - Dobson method = byars for O >= 100 or exact method below?
# phe_dasr * multiplier %>%
mutate(method="Dobson")
return(phe_dasr)
}
phe_dasr(DSR_testdata_big$count, DSR_testdata_big$pop)
phe_dasr <- function(O, n, rate = NULL, stdpop = esp2013, conf.level=0.95, multiplier=100000) {
#  if (x < 0) {
#    stop("numerator must be greater than or equal to zero")
#  } else if (n <= 0) {
#    stop("denominator must be greater than zero")
#  } else if (x > n) {
#    stop("numerator must be less than or equal to denominator for a proportion statistic")
#  } else if (!(max %in% c(1,100))) {
#    stop("function phe_proportion can only output a proportion (max=1) or a percentage (max=100)")
#  }
# stop if count <10
phe_dasr <- ageadjust.direct(O, n, rate = NULL, stdpop = esp2013$stdpop, conf.level = 0.95) %>%
# define correct CI separately if this not accurate enough - Dobson method = byars for O >= 100 or exact method below?
# phe_dasr * multiplier %>%
mutate(method="Dobson")
return(phe_dasr)
}
phe_dasr(DSR_testdata_big$count, DSR_testdata_big$pop)
library(readxl)
library(readxl)
prop_test_data <- read_excel("Test Data.xlsx", sheet=1, col_names=TRUE)
DSR_testdata_small <- read_excel("DSR_TestData.xlsx", sheet=1, col_names=TRUE)
prop_test_data <- read_excel(".\\tests\\testthat\\Test Data.xlsx", sheet=1, col_names=TRUE)
esp2013 <- data.frame(ageband=c("0-4",  "5-9",  "0-14", "15-19","20-24","25-29","30-34","35-39","40-44",
"45-49","50-54","55-69","60-64","65-69","70-74","75-79","80-84","85-89","90+"),
stdpop=c(5000,5500,5500,5500,6000,6000,6500,7000,7000,7000,7000,6500,6000,
5500,5000,4000,2500,1500,1000))
View(esp2013)
