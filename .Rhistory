stop("n_ref length must equal number of rows in each group within data")
}
data <- mutate(data,xrefpop_calc = x_ref,
nrefpop_calc = n_ref)
} else if (refpoptype == "field") {
enquoxref <- enquo(x_ref)
enquonref <- enquo(n_ref)
if (deparse(substitute(x_ref)) %in% colnames(data)) {
if(deparse(substitute(n_ref)) %in% colnames(data)) {
data <- mutate(data,xrefpop_calc = !!enquoxref,
nrefpop_calc = !!enquonref)
} else stop("n_ref is not a field name from data")
} else stop("x_ref is not a field name from data")
}
# apply quotes
x <- enquo(x)
n <- enquo(n)
# validate arguments
if (any(pull(data, !!x) < 0)) {
stop("numerators must all be greater than or equal to zero")
} else if (any(pull(data, !!n) < 0)) {
stop("denominators must all be greater than or equal to zero")
} else if ((confidence<0.9)|(confidence >1 & confidence <90)|(confidence > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
} else if (!(type %in% c("value", "lower", "upper", "standard", "full"))) {
stop("type must be one of value, lower, upper, standard or full")
}
# scale confidence level
if (confidence >= 90) {
confidence <- confidence/100
}
phe_isr <- data %>%
mutate(exp_x = xrefpop_calc/nrefpop_calc * (!!n)) %>%
summarise(observed  = sum((!!x)),
expected  = sum(exp_x),
ref_rate = sum(xrefpop_calc) / sum(nrefpop_calc) * multiplier) %>%
mutate(value     = observed / expected * ref_rate,
lowercl = if_else(observed<10, qchisq((1-confidence)/2,2*observed)/2/expected * ref_rate,
byars_lower(observed,confidence)/expected * ref_rate),
uppercl = if_else(observed<10, qchisq(confidence+(1-confidence)/2,2*observed+2)/2/expected * ref_rate,
byars_upper(observed,confidence)/expected * ref_rate),
confidence = paste(confidence*100,"%", sep=""),
statistic = paste("isr per",format(multiplier,scientific=F)),
method  = if_else(observed<10,"Exact","Byars"))
if (type == "lower") {
phe_isr <- phe_isr %>%
select(-observed, -expected, -ref_rate, -value, -uppercl, -confidence, -statistic, -method)
} else if (type == "upper") {
phe_isr <- phe_isr %>%
select(-observed, -expected, -ref_rate, -value, -lowercl, -confidence, -statistic, -method)
} else if (type == "value") {
phe_isr <- phe_isr %>%
select(-observed, -expected, -ref_rate, -lowercl, -uppercl, -confidence, -statistic, -method)
} else if (type == "standard") {
phe_isr <- phe_isr %>%
select(-observed, -expected, -ref_rate, -confidence, -statistic, -method)
}
return(phe_isr)
}
phe_smr <- function(data, x, n, x_ref, n_ref, refpoptype = "vector", type = "standard", confidence = 0.95, refvalue = 1) {
# check required arguments present
if (missing(data)|missing(x)|missing(n)|missing(x_ref)|missing(n_ref)) {
stop("function phe_smr requires at least 5 arguments: data, x, n, x_ref and n_ref")
}
# check same number of rows per group
if (n_distinct(select(ungroup(summarise(data,n=n())),n)) != 1) {
stop("data must contain the same number of rows for each group")
}
# check ref pops are valid and append to data
if (!(refpoptype %in% c("vector","field"))) {
stop("valid values for refpoptype are vector and field")
} else if (refpoptype == "vector") {
if (pull(slice(select(ungroup(summarise(data,n=n())),n),1)) != length(x_ref)) {
stop("x_ref length must equal number of rows in each group within data")
} else if (pull(slice(select(ungroup(summarise(data,n=n())),n),1)) != length(n_ref)) {
stop("n_ref length must equal number of rows in each group within data")
}
data <- mutate(data,xrefpop_calc = x_ref,
nrefpop_calc = n_ref)
} else if (refpoptype == "field") {
enquoxref <- enquo(x_ref)
enquonref <- enquo(n_ref)
if (deparse(substitute(x_ref)) %in% colnames(data)) {
if(deparse(substitute(n_ref)) %in% colnames(data)) {
data <- mutate(data,xrefpop_calc = !!enquoxref,
nrefpop_calc = !!enquonref)
} else stop("n_ref is not a field name from data")
} else stop("x_ref is not a field name from data")
}
# apply quotes
x <- enquo(x)
n <- enquo(n)
# validate arguments
if (any(pull(data, !!x) < 0)) {
stop("numerators must all be greater than or equal to zero")
} else if (any(pull(data, !!n) < 0)) {
stop("denominators must all be greater than or equal to zero")
} else if ((confidence<0.9)|(confidence >1 & confidence <90)|(confidence > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
} else if (!(type %in% c("value", "lower", "upper", "standard", "full"))) {
stop("type must be one of value, lower, upper, standard or full")
}
# scale confidence level
if (confidence >= 90) {
confidence <- confidence/100
}
phe_smr <- data %>%
mutate(exp_x = xrefpop_calc/nrefpop_calc * (!!n)) %>%
summarise(observed  = sum((!!x)),
expected  = sum(exp_x)) %>%
mutate(value     = observed / expected * refvalue,
lowercl = if_else(observed<10, qchisq((1-confidence)/2,2*observed)/2/expected * refvalue,
byars_lower(observed,confidence)/expected * refvalue),
uppercl = if_else(observed<10, qchisq(confidence+(1-confidence)/2,2*observed+2)/2/expected * refvalue,
byars_upper(observed,confidence)/expected * refvalue),
confidence = paste(confidence*100,"%", sep=""),
statistic = paste("smr x ",format(refvalue,scientific=F), sep=""),
method  = if_else(observed<10,"Exact","Byars"))
if (type == "lower") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -value, -uppercl, -confidence, -statistic, -method)
} else if (type == "upper") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -value, -lowercl, -confidence, -statistic, -method)
} else if (type == "value") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -lowercl, -uppercl, -confidence, -statistic, -method)
} else if (type == "standard") {
phe_smr <- phe_smr %>%
select(-observed, -expected, -confidence, -statistic, -method)
}
return(phe_smr)
}
data.frame(phe_isr(test_err2, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop))
data.frame(select(slice(test_ISR_results,25:26),1,5:7))
expect_error(data.frame(phe_isr(test_err2, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop)),
data.frame(select(slice(test_ISR_results,25:26),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test zero population")
expect_equal(data.frame(phe_isr(test_err2, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop)),
data.frame(select(slice(test_ISR_results,25:26),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test zero population")
View(test_err2)
test_ISR_results <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testresults_ISR", col_names=TRUE)
expect_equal(data.frame(phe_isr(test_err2, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop)),
data.frame(select(slice(test_ISR_results,25:26),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test zero population")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop,
x_ref = c(10303,2824,3225,3615,3641,3490,3789,3213,3031,2771,3089,3490,3595,4745,5514,7125,5694,6210,5757),
n_ref = c(50520,57173,60213,54659,44345,50128,62163,67423,62899,55463,60479,49974,44140,40888,37239,30819,18136,15325,13918))),
data.frame(select(slice(test_ISR_results,1:3),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test ref as specified vector")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="full")),
data.frame(select(slice(test_ISR_results,1:3),1:10)),
check.attributes=FALSE, check.names=FALSE,info="test full")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="value")),
data.frame(select(slice(test_ISR_results,1:3),1,5)),
check.attributes=FALSE, check.names=FALSE,info="test value")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="lower")),
data.frame(select(slice(test_ISR_results,1:3),1,6)),
check.attributes=FALSE, check.names=FALSE,info="test lower")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop,type="upper")),
data.frame(select(slice(test_ISR_results,1:3),1,7)),
check.attributes=FALSE, check.names=FALSE,info="test upper")
#test calculations
test_that("isrs and CIs calculate correctly",{
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop)),
data.frame(select(slice(test_ISR_results,1:3),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test default")
expect_equal(data.frame(phe_isr(test_ISR_ownref, count, pop, refcount, refpop, refpoptype="field")),
data.frame(select(slice(test_ISR_results,1:3),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test default with own ref data by col name")
expect_equal(data.frame(phe_isr(test_ISR_ownref, count, pop, test_ISR_ownref$refcount[1:19], test_ISR_ownref$refpop[1:19])),
data.frame(select(slice(test_ISR_results,1:3),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test default with own ref data as vector")
expect_equal(data.frame(phe_isr(test_err2, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop)),
data.frame(select(slice(test_ISR_results,25:26),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test zero population")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop,
x_ref = c(10303,2824,3225,3615,3641,3490,3789,3213,3031,2771,3089,3490,3595,4745,5514,7125,5694,6210,5757),
n_ref = c(50520,57173,60213,54659,44345,50128,62163,67423,62899,55463,60479,49974,44140,40888,37239,30819,18136,15325,13918))),
data.frame(select(slice(test_ISR_results,1:3),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test ref as specified vector")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="full")),
data.frame(select(slice(test_ISR_results,1:3),1:10)),
check.attributes=FALSE, check.names=FALSE,info="test full")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="value")),
data.frame(select(slice(test_ISR_results,1:3),1,5)),
check.attributes=FALSE, check.names=FALSE,info="test value")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="lower")),
data.frame(select(slice(test_ISR_results,1:3),1,6)),
check.attributes=FALSE, check.names=FALSE,info="test lower")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop,type="upper")),
data.frame(select(slice(test_ISR_results,1:3),1,7)),
check.attributes=FALSE, check.names=FALSE,info="test upper")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop,confidence = 0.998)),
data.frame(select(slice(test_ISR_results,4:6),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test confidence")
expect_equal(data.frame(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, multiplier=1000)),
data.frame(select(slice(test_ISR_results,7:9),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test multiplier")
})
test_that("isrs - errors are generated when invalid arguments are used",{
expect_error(phe_isr(test_multiarea, count, pop),
"function phe_isr requires at least 5 arguments: data, x, n, x_ref and n_ref",info="error invalid number of arguments")
expect_error(phe_isr(test_err1, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
"numerators must all be greater than or equal to zero",info="error numerators < 0")
expect_error(phe_isr(test_err3, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
"denominators must all be greater than zero",info="error denominator < 0")
expect_error(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, confidence = 0.74),
"confidence level must be between 90 and 100 or between 0.9 and 1",info="error confidence < 0.9")
expect_error(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, confidence = 3),
"confidence level must be between 90 and 100 or between 0.9 and 1",info="error confidence between 1 and 90")
expect_error(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, confidence = 1000),
"confidence level must be between 90 and 100 or between 0.9 and 1",info="error confidence >100")
expect_error(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="combined"),
"type must be one of value, lower, upper, standard or full",info="error invalid type")
expect_error(phe_isr(filter(test_multiarea,count < 100), count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
"data must contain the same number of rows for each group",info="error num rows per group")
expect_error(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount[1:18], n_ref = test_ISR_refdata$refpop),
"x_ref length must equal number of rows in each group within data",info="error x_ref length")
expect_error(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop[2:19]),
"n_ref length must equal number of rows in each group within data",info="error n_ref length")
expect_error(phe_isr(test_ISR_ownref, count, pop, test_ISR_ownref$refcount, test_ISR_ownref$refpop[1:19]),
"x_ref length must equal number of rows in each group within data",info="error x_ref length in data")
expect_error(phe_isr(test_ISR_ownref, count, pop, test_ISR_ownref$refcount[1:19], test_ISR_ownref$refpop),
"n_ref length must equal number of rows in each group within data",info="error n_ref length in data")
expect_error(phe_isr(test_multiarea, count, pop, test_ISR_ownref$refcount[1:19], test_ISR_ownref$refpop, refpoptype = "column"),
"valid values for refpoptype are vector and field",info="error invalid refpoptype")
expect_error(phe_isr(test_ISR_ownref, count, pop, ref_count, refpop, refpoptype = "field"),
"x_ref is not a field name from data",info="error x_ref not a fiel name")
expect_error(phe_isr(test_ISR_ownref, count, pop, refcount, ref_pop, refpoptype = "field"),
"n_ref is not a field name from data",info="error n_ref not a field name")
})
test_that("isrs - errors are generated when invalid arguments are used",{
expect_error(phe_isr(test_multiarea, count, pop),
"function phe_isr requires at least 5 arguments: data, x, n, x_ref and n_ref",info="error invalid number of arguments")
expect_error(phe_isr(test_err1, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
"numerators must all be greater than or equal to zero",info="error numerators < 0")
expect_error(phe_isr(test_err3, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
"denominators must all be greater than or equal to zero",info="error denominator < 0")
expect_error(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, confidence = 0.74),
"confidence level must be between 90 and 100 or between 0.9 and 1",info="error confidence < 0.9")
expect_error(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, confidence = 3),
"confidence level must be between 90 and 100 or between 0.9 and 1",info="error confidence between 1 and 90")
expect_error(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, confidence = 1000),
"confidence level must be between 90 and 100 or between 0.9 and 1",info="error confidence >100")
expect_error(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="combined"),
"type must be one of value, lower, upper, standard or full",info="error invalid type")
expect_error(phe_isr(filter(test_multiarea,count < 100), count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
"data must contain the same number of rows for each group",info="error num rows per group")
expect_error(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount[1:18], n_ref = test_ISR_refdata$refpop),
"x_ref length must equal number of rows in each group within data",info="error x_ref length")
expect_error(phe_isr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop[2:19]),
"n_ref length must equal number of rows in each group within data",info="error n_ref length")
expect_error(phe_isr(test_ISR_ownref, count, pop, test_ISR_ownref$refcount, test_ISR_ownref$refpop[1:19]),
"x_ref length must equal number of rows in each group within data",info="error x_ref length in data")
expect_error(phe_isr(test_ISR_ownref, count, pop, test_ISR_ownref$refcount[1:19], test_ISR_ownref$refpop),
"n_ref length must equal number of rows in each group within data",info="error n_ref length in data")
expect_error(phe_isr(test_multiarea, count, pop, test_ISR_ownref$refcount[1:19], test_ISR_ownref$refpop, refpoptype = "column"),
"valid values for refpoptype are vector and field",info="error invalid refpoptype")
expect_error(phe_isr(test_ISR_ownref, count, pop, ref_count, refpop, refpoptype = "field"),
"x_ref is not a field name from data",info="error x_ref not a fiel name")
expect_error(phe_isr(test_ISR_ownref, count, pop, refcount, ref_pop, refpoptype = "field"),
"n_ref is not a field name from data",info="error n_ref not a field name")
})
phe_smr(test_err2, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop)
data.frame(phe_smr(test_err2, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop))
View(test_ISR_results)
data.frame(select(slice(test_ISR_results,27:28),1,5:7))
data.frame(phe_smr(test_err2, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, refvalue=100))
#test calculations
test_that("smrs and CIs calculate correctly",{
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop)),
data.frame(select(slice(test_ISR_results,13:15),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test default")
expect_equal(data.frame(phe_smr(test_ISR_ownref, count, pop, refcount, refpop, refpoptype="field")),
data.frame(select(slice(test_ISR_results,13:15),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test default with own ref data by col name")
expect_equal(data.frame(phe_smr(test_ISR_ownref, count, pop, test_ISR_ownref$refcount[1:19], test_ISR_ownref$refpop[1:19])),
data.frame(select(slice(test_ISR_results,13:15),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test default with own ref data as vector")
expect_equal(data.frame(phe_smr(test_err2, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, refvalue=100)),
data.frame(select(slice(test_ISR_results,27:28),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test n = 0")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop,
x_ref = c(10303,2824,3225,3615,3641,3490,3789,3213,3031,2771,3089,3490,3595,4745,5514,7125,5694,6210,5757),
n_ref = c(50520,57173,60213,54659,44345,50128,62163,67423,62899,55463,60479,49974,44140,40888,37239,30819,18136,15325,13918))),
data.frame(select(slice(test_ISR_results,13:15),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test ref as specified vector")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="full")),
data.frame(select(slice(test_ISR_results,13:15),1:3,5:10)),
check.attributes=FALSE, check.names=FALSE,info="test full")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="value")),
data.frame(select(slice(test_ISR_results,13:15),1,5)),
check.attributes=FALSE, check.names=FALSE,info="test value")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="lower")),
data.frame(select(slice(test_ISR_results,13:15),1,6)),
check.attributes=FALSE, check.names=FALSE,info="test lower")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop,type="upper")),
data.frame(select(slice(test_ISR_results,13:15),1,7)),
check.attributes=FALSE, check.names=FALSE,info="test upper")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop,confidence = 0.998)),
data.frame(select(slice(test_ISR_results,16:18),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test confidence")
expect_equal(data.frame(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, refvalue=100)),
data.frame(select(slice(test_ISR_results,19:21),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test refvalue")
})
test_that("smrs - errors are generated when invalid arguments are used",{
expect_error(phe_smr(test_multiarea, count, pop),
"function phe_smr requires at least 5 arguments: data, x, n, x_ref and n_ref",info="error invalid number of arguments")
expect_error(phe_smr(test_err1, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
"numerators must all be greater than or equal to zero",info="error numerators < 0")
expect_error(phe_smr(test_err3, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
"denominators must all be greater than or equal to zero",info="error denominator < 0")
expect_error(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, confidence = 0.74),
"confidence level must be between 90 and 100 or between 0.9 and 1",info="error confidence < 0.9")
expect_error(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, confidence = 3),
"confidence level must be between 90 and 100 or between 0.9 and 1",info="error confidence between 1 and 90")
expect_error(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, confidence = 1000),
"confidence level must be between 90 and 100 or between 0.9 and 1",info="error confidence >100")
expect_error(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, type="combined"),
"type must be one of value, lower, upper, standard or full",info="error invalid type")
expect_error(phe_smr(filter(test_multiarea,count < 100), count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop),
"data must contain the same number of rows for each group",info="error num rows per group")
expect_error(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount[1:18], n_ref = test_ISR_refdata$refpop),
"x_ref length must equal number of rows in each group within data",info="error x_ref length")
expect_error(phe_smr(test_multiarea, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop[2:19]),
"n_ref length must equal number of rows in each group within data",info="error n_ref length")
expect_error(phe_smr(test_ISR_ownref, count, pop, test_ISR_ownref$refcount, test_ISR_ownref$refpop[1:19]),
"x_ref length must equal number of rows in each group within data",info="error x_ref length in data")
expect_error(phe_smr(test_ISR_ownref, count, pop, test_ISR_ownref$refcount[1:19], test_ISR_ownref$refpop),
"n_ref length must equal number of rows in each group within data",info="error n_ref length in data")
expect_error(phe_smr(test_multiarea, count, pop, test_ISR_ownref$refcount[1:19], test_ISR_ownref$refpop, refpoptype = "column"),
"valid values for refpoptype are vector and field",info="error invalid refpoptype")
expect_error(phe_smr(test_ISR_ownref, count, pop, ref_count, refpop, refpoptype = "field"),
"x_ref is not a field name from data",info="error x_ref not a fiel name")
expect_error(phe_smr(test_ISR_ownref, count, pop, refcount, ref_pop, refpoptype = "field"),
"n_ref is not a field name from data",info="error n_ref not a field name")
})
View(df)
knitr::opts_chunk$set(
collapse = TRUE,
error = TRUE,
comment = "#>"
)
library(PHEstatmethods)
library(RODBC)
library(dplyr)
dbhandle1 <- odbcDriverConnect('driver={SQL Server};server=SQLClusColLake\\Lake;
database=z_Populations_DEV;Encrypt=true;trusted_connection=true')
dbhandle2 <- odbcDriverConnect('driver={SQL Server};server=SQLClusColLake\\Lake;
database=BirthsDeaths;Encrypt=true;trusted_connection=true')
pops <- sqlQuery(dbhandle1,"SELECT Period, OfficialCode as RGN09CD, GeoName as RGN09NM,
QuinaryAgeBandMin as AgeBand, Population
FROM [z_Populations_DEV].[dbo].[vRes_RGN09_FiveYear]
WHERE OfficialCode in ('E12000001','E12000002','E12000003')
AND Period in ('2014','2015','2016')
AND Sex = 4
ORDER BY Period, OfficialCode, QuinaryAgeBandMin")
deaths <- sqlQuery(dbhandle2,"SELECT xYEAR as Period, RGN09CD, RGN09NM,
CASE WHEN xAge_Year>=90 THEN 90 ELSE FLOOR(CAST(LEFT(xAge_Year,2) AS FLOAT)/5)*5 END AS AgeBand, COUNT(*) AS Dths
FROM BirthsDeaths.dbo.vDeathsALL d
LEFT JOIN LookupsShared.dbo.vLKP_RGN09 l
ON d.GOR_Resi = l.RGN09CDO
WHERE RGN09CD IN ('E12000001','E12000002','E12000003')
AND xYEAR in ('2014','2015','2016')
GROUP BY xYEAR, RGN09CD, RGN09NM,
CASE WHEN xAge_Year>=90 THEN 90 ELSE FLOOR(CAST(LEFT(xAge_Year,2) AS FLOAT)/5)*5 END
ORDER BY xYear, RGN09CD, AgeBand")
odbcClose(dbhandle1)
odbcClose(dbhandle2)
df <- left_join(pops,deaths, by = c("Period","RGN09CD","RGN09NM","AgeBand")) %>%
group_by(Period, RGN09CD)
View(df)
df$AgeBand
library(tidyr)
spread(df,AgeBand)
?spread
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
View(stocks)
stocksm <- stocks %>% gather(stock, price, -time)
View(stocksm)
stocksm %>% spread(stock, price)
spread(df,AgeBand)
separate(df,AgeBand,esp2013)
separate(df,AgeBand,c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90))
spread(df,AgeBand, Dths)
spread(df,AgeBand, Population,Dths)
df$AgeBand == rep(c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90))
any((df$AgeBand == rep(c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90)) == FALSE)
any(df$AgeBand != rep(c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90))
)
?all
all(df$AgeBand == rep(c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90))
)
esp_wrongorder <- c(90,85,80,75,70,65,60,55,50,45,40,35,30,25,20,15,10,5,0)
View(df)
phe_dsr(df,Dths,Population,stdpop = espwrongorder)
phe_dsr(df,Dths,Population,stdpop = esp_wrongorder)
phe_dsr(df,Dths,Population)
all(df$AgeBand[1:170] == rep(c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90)))
check <- df %>%
check <- df %>%
check <- df
View(df)
df$AgeBand[df$AgeBand==35] <- 40
View(check)
df$AgeBand[df$Population=135701] <- 15
all(df$AgeBand == rep(c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90)))
View(df)
df$AgeBand[8] <- 35
View(df)
check$AgeBand[8] <- 40
check$AgeBand[7] <- 35
View(check)
check$AgeBand[7] <- 305
check$AgeBand[7] <- 30
check$AgeBand[9] <- 35
View(check)
all(df$AgeBand == rep(c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90)))
df <- left_join(pops,deaths, by = c("Period","RGN09CD","RGN09NM","AgeBand")) %>%
group_by(Period, RGN09CD)
df %>%
arrange(desc(AgeBand)) %>%
phe_dsr(Dths,Population)
Failure to do so could result in apparent successful execution of the phe_dsr function even though the data may have been incorrectly standardised.
df %>%
arrange(desc(AgeBand)) %>%
phe_dsr(Dths,Population)
phe_dsr(df,Dths,Population)
right <- phe_dsr(df,Dths,Population)
wrong <- df %>%
arrange(desc(AgeBand)) %>%
phe_dsr(Dths,Population)
right == wrong
df_resort <- df
df_resort %>%
ungroup() %>%
group_by(AgeBand, Period, RGN09CD)
View(df_resort)
phe_dsr(df)
phe_dsr(df, Dths, Population)
phe_dsr(df_resort, Dths, Population)
df_resort %>%
arrange(AgeBand,Period,RGN09CD) %>%
)
df_resort %>%
arrange(AgeBand,Period,RGN09CD)
df_resort <- df_resort %>%
arrange(AgeBand,Period,RGN09CD)
phe_dsr(df_resort,Dths,population)
phe_dsr(df_resort,Dths,Population)
phe_dsr(df,Dths,Population)
pull(slice(select(ungroup(summarise(df,n=n())),n),1)) == length(esp2013)
all(right) != all(wrong)
n_distinct(select(ungroup(summarise(df,n=n())),n)) = 1
ungroup(summarise(df,n=n()))
n_distinct(select(ungroup(summarise(df,n=n())),n))
n_distinct(select(ungroup(summarise(df,n=n())),n)) == 1
View(df_resort)
all(df$AgeBand == rep(c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90)))
View(check)
all(check$AgeBand == rep(c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90)))
all(df_resort$AgeBand == rep(c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90)))
?rep
devtools::document()
devtools::check()
expect_equal(data.frame(phe_smr(test_err2, count, pop, x_ref = test_ISR_refdata$refcount, n_ref = test_ISR_refdata$refpop, refvalue=100)),
data.frame(select(slice(test_ISR_results,27:28),1,5:7)),
check.attributes=FALSE, check.names=FALSE,info="test n = 0")
# Byars Wilson
test_BW <- read_excel(".\\tests\\testthat\\testdata_Byars_Wilson.xlsx", sheet="testdata_B_W",   col_names=TRUE)
# Proportions
test_Prop   <- read_excel(".\\tests\\testthat\\testdata_Proportion.xlsx", sheet="testdata_Prop",   col_names=TRUE)
#Rates
test_Rate <- read_excel(".\\tests\\testthat\\testdata_Rate.xlsx", sheet="testdata_Rate", col_names=TRUE)
#Means
test_Mean         <- read_excel(".\\tests\\testthat\\testdata_Mean.xlsx", sheet="testdata_Mean",         col_names=TRUE)
test_Mean_results <- read_excel(".\\tests\\testthat\\testdata_Mean.xlsx", sheet="testdata_Mean_results", col_names=TRUE)
test_Mean_Grp <- group_by(test_Mean,area)
# DSRs, ISRs and SMRs
test_multiarea   <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_multiarea", col_names=TRUE) %>%
group_by(area)
test_DSR_1976    <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_1976",   col_names=TRUE)
test_err1        <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_err1",   col_names=TRUE)
test_err2        <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_err2",   col_names=TRUE) %>%
group_by(area)
test_err3        <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_err3",   col_names=TRUE)
test_DSR_results <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testresults_DSR", col_names=TRUE)
test_multigroup  <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_multigroup", col_names=TRUE) %>%
group_by(area,year)
test_ISR_results <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testresults_ISR", col_names=TRUE)
test_ISR_refdata <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="refdata",         col_names=TRUE)
test_ISR_ownref  <- read_excel(".\\tests\\testthat\\testdata_DSR_ISR_SMR.xlsx", sheet="testdata_multiarea_ref", col_names=TRUE) %>%
group_by(area)
# use this code to save loaded data to R\sysdata.rda file:
devtools::use_data(test_BW, test_Prop,
test_Rate,
test_Mean, test_Mean_Grp, test_Mean_results,
test_multiarea, test_multigroup, test_DSR_1976, test_err1, test_err2, test_err3, test_DSR_results,
test_ISR_refdata, test_ISR_results, test_ISR_ownref,
internal = TRUE, overwrite = TRUE)
devtools::check()
x <- covr::package_coverage()
covr::zero_coverage(x)
x
