}
phe_rate(65,100)
?data.frame
phe_rate <- function(x, n, conf.level = 0.95, multiplier = 100) {
# add stops
#  rate <- x/n*multiplier
#  lowercl<-byars_lower(x)/n*multiplier
#  uppercl<-byars_upper(x)/n*multiplier
phe_rate <- data.frame(c("Byars", x, n, x / n * multiplier, byars_lower(x) / n * multiplier,byars_upper(x) / n * multiplier))
#  names(phe_rate) <- c("method","numerator","denominator","rate",paste("lower",conf.level*100,"cl",sep=""),paste("upper",conf.level*100,"cl",sep=""))
return(phe_rate)
}
phe_rate(65,100)
binom.confint(65,100)
phe_rate <- function(x, n, conf.level = 0.95, multiplier = 100) {
# add stops
#  rate <- x/n*multiplier
#  lowercl<-byars_lower(x)/n*multiplier
#  uppercl<-byars_upper(x)/n*multiplier
phe_rate <- data.frame("Byars", x, n, x / n * multiplier, byars_lower(x) / n * multiplier,byars_upper(x) / n * multiplier)
#  names(phe_rate) <- c("method","numerator","denominator","rate",paste("lower",conf.level*100,"cl",sep=""),paste("upper",conf.level*100,"cl",sep=""))
return(phe_rate)
}
phe_rate(65,100)
phe_rate <- function(x, n, conf.level = 0.95, multiplier = 100) {
# add stops
rate <- x/n*multiplier
lowercl<-byars_lower(x)/n*multiplier
uppercl<-byars_upper(x)/n*multiplier
phe_rate <- data.frame("Byars", x, n, rate, lowercl, uppercl)
#  names(phe_rate) <- c("method","numerator","denominator","rate",paste("lower",conf.level*100,"cl",sep=""),paste("upper",conf.level*100,"cl",sep=""))
return(phe_rate)
}
phe_rate(65,100)
phe_rate(800,10000)
phe_rate <- function(x, n, conf.level = 0.95, multiplier = 100000) {
# add stops
rate <- x/n*multiplier
lowercl<-byars_lower(x)/n*multiplier
uppercl<-byars_upper(x)/n*multiplier
phe_rate <- data.frame("Byars", x, n, rate, lowercl, uppercl)
#  names(phe_rate) <- c("method","numerator","denominator","rate",paste("lower",conf.level*100,"cl",sep=""),paste("upper",conf.level*100,"cl",sep=""))
return(phe_rate)
}
phe_rate(800,10000)
phe_rate <- function(x, n, conf.level = 0.95, multiplier = 100000) {
# add stops
rate <- x/n*multiplier
lowercl<-byars_lower(x)/n*multiplier
uppercl<-byars_upper(x)/n*multiplier
phe_rate <- data.frame("Byars", x, n, rate, lowercl, uppercl)
names(phe_rate) <- c("method","numerator","denominator","rate",paste("lower",conf.level*100,"cl",sep=""),paste("upper",conf.level*100,"cl",sep=""))
return(phe_rate)
}
phe_rate(800,10000)
phe_dsr <- function(x,n,stdpop = esp2013, conf.level = 0.95, multiplier = 100000) {
# Calculate DSR
dsr <- sum(x * stdpop / n) / sum(stdpop)
# Calculate CIs using Byars function created in Rates.R
vardsr<-1/sum(stdpop)^2 * sum((stdpop^2 * x) / n^2)
vardsr
lowercl<- dsr + sqrt((vardsr/sum(x)))*(Byars_lower(sum(x))-sum(x))
lowercl
uppercl<- dsr + sqrt((vardsr/sum(x)))*(Byars_upper(sum(x))-sum(x))
uppercl
phe_dsr <- data.frame("Dobson",x, n, dsr, lowercl, uppercl)
names(phe_dsr) <- c("method","numerator","denominator","rate",paste("lower",conf.level*100,"cl",sep=""),paste("upper",conf.level*100,"cl",sep=""))
return(phe_dsr)
}
testpop <- c(84935,80367,72122,79259,99806,87362,81579,71103,
70001,69007,63203,52638,46087,40887,32604,28399,
21625,13021,7355)
testobs <- c(27,45,55,100,125,300,295,270,275,450,455,459,345,300,
270,265,100,90,35)
# define the function
phe_dsr <- function(x,n,stdpop = esp2013, conf.level = 0.95, multiplier = 100000) {
# Calculate DSR
dsr <- sum(x * stdpop / n) / sum(stdpop)
# Calculate CIs using Byars function created in Rates.R
vardsr<-1/sum(stdpop)^2 * sum((stdpop^2 * x) / n^2)
vardsr
lowercl<- dsr + sqrt((vardsr/sum(x)))*(Byars_lower(sum(x))-sum(x))
lowercl
uppercl<- dsr + sqrt((vardsr/sum(x)))*(Byars_upper(sum(x))-sum(x))
uppercl
phe_dsr <- data.frame("Dobson",x, n, dsr, lowercl, uppercl)
names(phe_dsr) <- c("method","numerator","denominator","rate",paste("lower",conf.level*100,"cl",sep=""),paste("upper",conf.level*100,"cl",sep=""))
return(phe_dsr)
}
phe_dsr(testobs,testpop)
head(testobs)
testobs
esp2013 <- c(5000,5500,5500,5500,6000,6000,6500,7000,7000,7000,7000,6500,6000,
5500,5000,4000,2500,1500,1000)
phe_dsr <- function(x,n,stdpop = esp2013, conf.level = 0.95, multiplier = 100000) {
# Calculate DSR
dsr <- sum(x * stdpop / n) / sum(stdpop)
# Calculate CIs using Byars function created in Rates.R
vardsr<-1/sum(stdpop)^2 * sum((stdpop^2 * x) / n^2)
vardsr
lowercl<- dsr + sqrt((vardsr/sum(x)))*(Byars_lower(sum(x))-sum(x))
lowercl
uppercl<- dsr + sqrt((vardsr/sum(x)))*(Byars_upper(sum(x))-sum(x))
uppercl
phe_dsr <- data.frame("Dobson",x, n, dsr, lowercl, uppercl)
names(phe_dsr) <- c("method","numerator","denominator","rate",paste("lower",conf.level*100,"cl",sep=""),paste("upper",conf.level*100,"cl",sep=""))
return(phe_dsr)
}
phe_dsr(testobs,testpop)
# define the function
phe_dsr <- function(x,n,stdpop = esp2013, conf.level = 0.95, multiplier = 100000) {
# Calculate DSR
dsr <- sum(x * stdpop / n) / sum(stdpop)
# Calculate CIs using Byars function created in Rates.R
vardsr<-1/sum(stdpop)^2 * sum((stdpop^2 * x) / n^2)
vardsr
lowercl<- dsr + sqrt((vardsr/sum(x)))*(byars_lower(sum(x))-sum(x))
lowercl
uppercl<- dsr + sqrt((vardsr/sum(x)))*(byars_upper(sum(x))-sum(x))
uppercl
phe_dsr <- data.frame("Dobson",x, n, dsr, lowercl, uppercl)
names(phe_dsr) <- c("method","numerator","denominator","rate",paste("lower",conf.level*100,"cl",sep=""),paste("upper",conf.level*100,"cl",sep=""))
return(phe_dsr)
}
phe_dsr(testobs,testpop)
# define the function
phe_dsr <- function(x,n,stdpop = esp2013, conf.level = 0.95, multiplier = 100000) {
# Calculate DSR
dsr <- sum(x * stdpop / n) / sum(stdpop)
# Calculate CIs using Byars function created in Rates.R
vardsr<-1/sum(stdpop)^2 * sum((stdpop^2 * x) / n^2)
vardsr
lowercl<- dsr + sqrt((vardsr/sum(x)))*(byars_lower(sum(x))-sum(x))
lowercl
uppercl<- dsr + sqrt((vardsr/sum(x)))*(byars_upper(sum(x))-sum(x))
uppercl
phe_dsr <- data.frame("Dobson",sum(x), sum(n), dsr, lowercl, uppercl)
names(phe_dsr) <- c("method","sum(numerator)","sum(denominator)","rate",paste("lower",conf.level*100,"cl",sep=""),paste("upper",conf.level*100,"cl",sep=""))
return(phe_dsr)
}
phe_dsr(testobs,testpop)
phe_dsr <- function(x,n,stdpop = esp2013, conf.level = 0.95, multiplier = 100000) {
# Calculate DSR
dsr <- sum(x * stdpop / n) / sum(stdpop) * multiplier
# Calculate CIs using Byars function created in Rates.R
vardsr<-1/sum(stdpop)^2 * sum((stdpop^2 * x) / n^2)
vardsr
lowercl<- dsr + sqrt((vardsr/sum(x)))*(byars_lower(sum(x))-sum(x)) * multiplier
lowercl
uppercl<- dsr + sqrt((vardsr/sum(x)))*(byars_upper(sum(x))-sum(x)) * multiplier
uppercl
phe_dsr <- data.frame("Dobson",sum(x), sum(n), dsr, lowercl, uppercl)
names(phe_dsr) <- c("method","sum(numerator)","sum(denominator)","rate",paste("lower",conf.level*100,"cl",sep=""),paste("upper",conf.level*100,"cl",sep=""))
return(phe_dsr)
}
phe_dsr(testobs,testpop)
library(readxl)
# import test data
DSR_testdata_small <- read_excel(".\\tests\\testdata\\DSR_TestData.xlsx", sheet=1, col_names=TRUE)
DSR_testdata_big <- read_excel(".\\tests\\testdata\\DSR_TestData.xlsx", sheet=3, col_names=TRUE)
# import test data
DSR_testdata_small <- read_excel(".\\tests\\testdata\\DSR_TestData.xlsx", sheet=1, col_names=TRUE)
DSR_testdata_big <- read_excel(".\\tests\\testdata\\DSR_TestData.xlsx", sheet=3, col_names=TRUE)
DSR_testdata_small <- read_excel(".\\tests\\testdata\\DSR_testdata.xlsx", sheet=1, col_names=TRUE)
DSR_testdata_big <- read_excel(".\\tests\\testdata\\DSR_testdata.xlsx", sheet=3, col_names=TRUE)
library(readxl)
DSR_testdata_small <- read_excel(".\\tests\\testdata\\DSR_testdata.xlsx", sheet=1, col_names=TRUE)
DSR_testdata_big <- read_excel(".\\tests\\testdata\\DSR_testdata.xlsx", sheet=3, col_names=TRUE)
#st the working directory
setwd("C:\Users\Georgina.Anderson\Documents\R\Projects\PHEstatmethods")
# import test data
DSR_testdata_small <- read_excel(".\\tests\\testdata\\DSR_testdata.xlsx", sheet=1, col_names=TRUE)
DSR_testdata_big <- read_excel(".\\tests\\testdata\\DSR_testdata.xlsx", sheet=3, col_names=TRUE)
#set the working directory
setwd("C:/Users/Georgina.Anderson/Documents/R/Projects/PHEstatmethods")
# import test data
DSR_testdata_small <- read_excel(".\\tests\\testdata\\DSR_testdata.xlsx", sheet=1, col_names=TRUE)
DSR_testdata_big <- read_excel(".\\tests\\testdata\\DSR_testdata.xlsx", sheet=3, col_names=TRUE)
DSR_testdata_small <- read_excel(".\\tests\\testthat\\DSR_testdata.xlsx", sheet=1, col_names=TRUE)
DSR_testdata_big <- read_excel(".\\tests\\testthat\\DSR_testdata.xlsx", sheet=3, col_names=TRUE)
install.packages("dsrTest")
library(dsrTest)
??dsrTest
View(DSR_testdata_small)
phe_dsr(DSR_testdata_small$count,DSR_testdata_small$pop,DSR_testdata_small$stdpop)
phe_dsr(DSR_testdata_small$count,DSR_testdata_small$pop,DSR_testdata_small$stdpop, multiplier=10000)
phe_dsr(DSR_testdata_big$count,DSR_testdata_big$pop,DSR_testdata_big$stdpop, multiplier=10000)
small_results <- phe_dsr(DSR_testdata_small$count,DSR_testdata_small$pop,DSR_testdata_small$stdpop, multiplier=10000)
big_results <- phe_dsr(DSR_testdata_big$count,DSR_testdata_big$pop,DSR_testdata_big$stdpop, multiplier=10000)
??dobsonControl
# Need to add preamble to generate help files
# -------------------------------------------------------------------------------------------------
# define the European Standard Population
esp2013 <- c(5000,5500,5500,5500,6000,6000,6500,7000,7000,
7000,7000,6500,6000,5500,5000,4000,2500,1500,1000)
##test data - remove later)
testpop <- c(84935,80367,72122,79259,99806,87362,81579,71103,
70001,69007,63203,52638,46087,40887,32604,28399,
21625,13021,7355)
testobs <- c(27,45,55,100,125,300,295,270,275,450,455,459,345,300,
270,265,100,90,35)
# define the function
phe_dsr <- function(x,n,stdpop = esp2013, conf.level = 0.95, multiplier = 100000) {
# Calculate DSR
dsr <- sum(x * stdpop / n) / sum(stdpop) * multiplier
# Calculate CIs using Byars function created in Rates.R
vardsr  <- 1/sum(stdpop)^2 * sum((stdpop^2 * x) / n^2)
lowercl <- dsr + sqrt((vardsr/sum(x)))*(byars_lower(sum(x))-sum(x)) * multiplier
uppercl <- dsr + sqrt((vardsr/sum(x)))*(byars_upper(sum(x))-sum(x)) * multiplier
phe_dsr <- data.frame("Dobson",sum(x), sum(n), dsr, lowercl, uppercl)
names(phe_dsr) <- c("method","sum(numerator)","sum(denominator)","rate",paste("lower",conf.level*100,"cl",sep=""),paste("upper",conf.level*100,"cl",sep=""))
return(phe_dsr)
}
library(dplyr)
library(binom)
library(devtools)
devtools::document()
devtools::document()
?phe_proportion
phe_proportion(65,100,99.8,TRUE)
devtools::document()
?phe_proportion
?mean
?phe_proportion
# create function to calculate Byar's lower CI limit
byars_lower <- function(x) {
byars_lower <- x*(1-1/(9*x)-qnorm(1-0.05/2)/(3*sqrt(x)))^3
return(byars_lower)
}
# create function to calculate Byar's upper CI limit
byars_upper <- function(x) {
byars_upper <- (x+1)*(1-1/(9*(x+1))+qnorm(1-0.05/2)/(3*sqrt(x+1)))^3
return(byars_upper)
}
# create function to calculate rate and CIs using Byar's method
phe_rate <- function(x, n, conf.level = 0.95, multiplier = 100000) {
# validate arguments
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence interval must be >= 90 and <= 100 (or >= 0.9 and <= 1)")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# calculate rate and CIs
rate <- x/n*multiplier
lowercl<-byars_lower(x)/n*multiplier
uppercl<-byars_upper(x)/n*multiplier
# construct output
phe_rate <- data.frame("Byars", x, n, rate, lowercl, uppercl)
names(phe_rate) <- c("method","numerator","denominator","rate",paste("lower",conf.level*100,"cl",sep=""),paste("upper",conf.level*100,"cl",sep=""))
return(phe_rate)
}
phe_rate(65,100)
devtools::document()
?phe_dsr
# define the European Standard Population
esp2013 <- c(5000,5500,5500,5500,6000,6000,6500,7000,7000,
7000,7000,6500,6000,5500,5000,4000,2500,1500,1000)
##test data - remove later)
testpop <- c(84935,80367,72122,79259,99806,87362,81579,71103,
70001,69007,63203,52638,46087,40887,32604,28399,
21625,13021,7355)
testobs <- c(27,45,55,100,125,300,295,270,275,450,455,459,345,300,
270,265,100,90,35)
# define the DSR function
phe_dsr <- function(x,n,stdpop = esp2013, conf.level = 0.95, multiplier = 100000) {
# validate arguments
if (x < 0) {
stop("numerator must be greater than or equal to zero")
} else if (n <= 0) {
stop("denominator must be greater than zero")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence interval must be >= 90 and <= 100 (or >= 0.9 and <= 1)")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# Calculate DSR
dsr <- sum(x * stdpop / n) / sum(stdpop) * multiplier
# Calculate CIs using Byars function created in Rates.R
vardsr  <- 1/sum(stdpop)^2 * sum((stdpop^2 * x) / n^2)
lowercl <- dsr + sqrt((vardsr/sum(x)))*(byars_lower(sum(x))-sum(x)) * multiplier
uppercl <- dsr + sqrt((vardsr/sum(x)))*(byars_upper(sum(x))-sum(x)) * multiplier
phe_dsr <- data.frame("Dobson",sum(x), sum(n), dsr, lowercl, uppercl)
names(phe_dsr) <- c("method","sum(numerator)","sum(denominator)","rate",paste("lower",conf.level*100,"cl",sep=""),paste("upper",conf.level*100,"cl",sep=""))
return(phe_dsr)
}
?phe_dsr
??phe_dsr
?esp2013
phe_rate(c(65,20),c(80,100))
phe_dsr(65,100)
phe_rate(65,100)
test <- c(65,100)
length(test)
devtools::document()
devtools::document()
devtools::document()
?phe_proportion
devtools::document()
?phe_proportion
?phe_proportion
devtools::document()
devtools::document()
phe_rate(c(65,20),c(100,100))
phe_rate(65,100)
phe_rate(20,100)
phe_rate <- function(x, n, conf.level = 0.95, multiplier = 100000) {
# validate arguments
if (any(x < 0)) {
stop("numerator must be greater than or equal to zero")
} else if (any(n <= 0)) {
stop("denominator must be greater than zero")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence interval must be >= 90 and <= 100 (or >= 0.9 and <= 1)")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# calculate rate and CIs
rate <- x/n*multiplier
lowercl<-byars_lower(x)/n*multiplier
uppercl<-byars_upper(x)/n*multiplier
# construct output
phe_rate <- data.frame("Byars", x, n, rate, lowercl, uppercl)
names(phe_rate) <- c("method","numerator","denominator","rate",
paste("lower",conf.level*100,"cl",sep=""),
paste("upper",conf.level*100,"cl",sep=""))
return(phe_rate)
}
phe_rate(c(65,20),c(100,100))
phe_rate(c(65,20),c(0,100))
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
# validate arguments
if (any(x < 0)) {
stop("numerator must be greater than or equal to zero")
} else if (any(n <= 0)) {
stop("denominator must be greater than zero")
} else if (any(x > n)) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence interval must be >= 90 and <= 100 (or >= 0.9 and <= 1)")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
phe_proportion(c(65,20,80),100)
phe_proportion(c(65,20,80),c(100,100,100)
phe_proportion(65,100
)
phe_proportion(c(65,20,80),c(100,100,100))
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
# validate arguments
if (any(x < 0)) {
stop("numerator must be greater than or equal to zero")
} else if (any(n <= 0)) {
stop("denominator must be greater than zero")
} else if (any(x > n)) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence interval must be >= 90 and <= 100 (or >= 0.9 and <= 1)")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
phe_proportion(c(65,20,80),c(100,100,100))
phe_proportion <- function(x, n, conf.level=0.95, percentage=FALSE) {
# validate arguments
if (any(x < 0)) {
stop("numerator must be greater than or equal to zero")
} else if (any(n <= 0)) {
stop("denominator must be greater than zero")
} else if (any(x > n)) {
stop("numerator must be less than or equal to denominator for a proportion statistic")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence interval must be >= 90 and <= 100 (or >= 0.9 and <= 1)")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# set multiplier
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
# calculate proportion and CIs
phe_proportion <- data.frame(binom.confint(x, n, conf.level, methods="wilson")) %>%
mutate(mean = mean * multiplier) %>%
mutate(lower = lower * multiplier) %>%
mutate(upper = upper * multiplier)
# set column names
names(phe_proportion) <- c("method","numerator","denominator","proportion",
paste("lower",conf.level*100,"cl",sep=""),
paste("upper",conf.level*100,"cl",sep=""))
return(phe_proportion)
}
phe_proportion(c(65,20,80),c(100,100,100))
phe_proportion(c(65,20,80),c(100,100,0))
phe_proportion(c(65,20,0),c(100,100,100))
phe_proportion(c(65,20,-2),c(100,100,100))
devtools::document()
?phe_proportion
phe_rate <- function(x, n, conf.level = 0.95, multiplier = 100000) {
# validate arguments
if (any(x < 0)) {
stop("numerators must be greater than or equal to zero")
} else if (any(n <= 0)) {
stop("denominators must be greater than zero")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence interval must be >= 90 and <= 100 (or >= 0.9 and <= 1)")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# calculate rate and CIs
rate <- x/n*multiplier
lowercl<-byars_lower(x,conf.level)/n*multiplier
uppercl<-byars_upper(x, conf.level)/n*multiplier
# construct output
phe_rate <- data.frame("Byars", x, n, rate, lowercl, uppercl)
names(phe_rate) <- c("method","numerator","denominator","rate",
paste("lower",conf.level*100,"cl",sep=""),
paste("upper",conf.level*100,"cl",sep=""))
return(phe_rate)
}
phe_rate(65,100)
byars_lower <- function(x, conf.level = 0.95) {
# validate arguments
if (any(x < 0)) {
stop("observed events (x) must all be greater than or equal to zero")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence interval must be >= 90 and <= 100 (or >= 0.9 and <= 1)")
} else if (length(x) != length(n)|length(x) != length(stdpop))
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
byars_lower <- x*(1-1/(9*x)-qnorm(conf.level/2)/(3*sqrt(x)))^3
return(byars_lower)
}
byars_upper <- function(x, conf.level = 0.95) {
# validate arguments
if (any(x < 0)) {
stop("observed events (x) must all be greater than or equal to zero")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence interval must be >= 90 and <= 100 (or >= 0.9 and <= 1)")
} else if (length(x) != length(n)|length(x) != length(stdpop))
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
byars_upper <- (x+1)*(1-1/(9*(x+1))+qnorm(conf.level/2)/(3*sqrt(x+1)))^3
return(byars_upper)
}
phe_rate(65,100)
byars_lower(65,0.95)
byars_lower <- function(x, conf.level = 0.95) {
# validate arguments
if (any(x < 0)) {
stop("observed events (x) must all be greater than or equal to zero")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence interval must be >= 90 and <= 100 (or >= 0.9 and <= 1)")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
byars_lower <- x*(1-1/(9*x)-qnorm(conf.level/2)/(3*sqrt(x)))^3
return(byars_lower)
}
# -------------------------------------------------------------------------------------------------
#' Calculates upper confidence limit for an observed number of events using Byar's method.
#'
#' @param x the observed number of events; numeric; no default
#' @param conf.level the level of confidence required expressed as a number between 0.9 and 1
#'                   or 90 and 100; numeric; default 0.95
#'
#'
#' @return Returns an upper confidence limit
#'
#' @examples
#' byars_upper(65)
#' byars_upper(65,99.8)
# -------------------------------------------------------------------------------------------------
# create function to calculate Byar's upper CI limit
byars_upper <- function(x, conf.level = 0.95) {
# validate arguments
if (any(x < 0)) {
stop("observed events (x) must all be greater than or equal to zero")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence interval must be >= 90 and <= 100 (or >= 0.9 and <= 1)")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
byars_upper <- (x+1)*(1-1/(9*(x+1))+qnorm(conf.level/2)/(3*sqrt(x+1)))^3
return(byars_upper)
}
byars_lower(65,0.95)
rates(65,100)
