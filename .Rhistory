byars_upper(obs,conf.level)/exp*multiplier),
confidence = paste(conf.level*100,"%"),
method  = if_else(obs<10,"Exact","Byars"))
names(phe_isr) <- c("group", "observed", "expected", "isr",
"lowercl","uppercl","confidence","method")
}
# calculate ISR and CIs to output as rate
if (ratio == FALSE) {
phe_isr <- data.frame(x,n,x_ref,n_ref,groupref) %>%
mutate(exp_x = x_ref/n_ref * n) %>%
group_by(groupref) %>%
summarise(obs  = sum(x),
exp  = sum(exp_x),
ref_rate = sum(x_ref) / sum(n_ref) * multiplier) %>%
mutate(isr     = obs / exp * ref_rate,
lowercl = if_else(obs<10, qchisq((1-conf.level)/2,2*obs)/2/exp * ref_rate,
byars_lower(obs,conf.level)/exp * ref_rate),
uppercl = if_else(obs<10, qchisq(conf.level+(1-conf.level)/2,2*obs+2)/2/exp * ref_rate,
byars_upper(obs,conf.level)/exp * ref_rate),
confidence = paste(conf.level*100,"%"),
method  = if_else(obs<10,"Exact","Byars"))
#%>%
#            select(1:3,5:7,4,8)
names(phe_isr) <- c("row_label", "observed", "expected", "isr",
"lowercl","uppercl","confidence", "reference rate", "method")
}
return(phe_isr)
}
phe_isr(test_ISR_multiarea$count,
test_ISR_multiarea$pop,
test_ISR_refdata$refcount,
test_ISR_refdata$refpop,
groupref=test_ISR_multiarea$area, ratio=FALSE)
phe_isr <- function(x,n,x_ref, n_ref, groupref = "No Grouping", conf.level = 0.95,
ratio = TRUE, ref_0 = TRUE, multiplier = 100000) {
# validate arguments
if (any(x < 0)) {
stop("numerators must all be greater than or equal to zero")
} else if (any(n <= 0)) {
stop("denominators must all be greater than zero")
} else if (any(x_ref < 0)) {
stop("reference numerators must all be greater than or equal to zero")
} else if (any(n_ref <= 0)) {
stop("reference denominators must all be greater than zero")
} else if ((conf.level<0.9) | (conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
} else if (length(x) != length(n)) {
stop("numerator and denominator vectors must be of equal length")
} else if (length(x_ref) != length(n_ref)) {
stop("reference numerator and reference denominator vectors must be of equal length")
} else if (length(x) %% length(x_ref) !=0) {
stop("numerator vector length must be a multiple of the reference numerator vector length")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# loop for ratios
if (ratio==TRUE) {
#set multiplier
multiplier <- 1
if (ref_0 == FALSE) {
multiplier <- 100
}
# calculate ISR and CIS to output as ratio
phe_isr <- data.frame(x,n,x_ref,n_ref,groupref) %>%
mutate(exp_x = x_ref/n_ref * n) %>%
group_by(groupref) %>%
summarise(obs  = sum(x),
exp  = sum(exp_x),
isr  = obs / exp * multiplier) %>%
mutate(lowercl = if_else(obs<10, qchisq((1-conf.level)/2,2*obs)/2/exp*multiplier,
byars_lower(obs,conf.level)/exp*multiplier),
uppercl = if_else(obs<10, qchisq(conf.level+(1-conf.level)/2,2*obs+2)/2/exp*multiplier,
byars_upper(obs,conf.level)/exp*multiplier),
confidence = paste(conf.level*100,"%"),
method  = if_else(obs<10,"Exact","Byars"))
names(phe_isr) <- c("group", "observed", "expected", "isr",
"lowercl","uppercl","confidence","method")
}
# calculate ISR and CIs to output as rate
if (ratio == FALSE) {
phe_isr <- data.frame(x,n,x_ref,n_ref,groupref) %>%
mutate(exp_x = x_ref/n_ref * n) %>%
group_by(groupref) %>%
summarise(obs  = sum(x),
exp  = sum(exp_x),
ref_rate = sum(x_ref) / sum(n_ref) * multiplier) %>%
mutate(isr     = obs / exp * ref_rate,
lowercl = if_else(obs<10, qchisq((1-conf.level)/2,2*obs)/2/exp * ref_rate,
byars_lower(obs,conf.level)/exp * ref_rate),
uppercl = if_else(obs<10, qchisq(conf.level+(1-conf.level)/2,2*obs+2)/2/exp * ref_rate,
byars_upper(obs,conf.level)/exp * ref_rate),
confidence = paste(conf.level*100,"%"),
method  = if_else(obs<10,"Exact","Byars"))
#%>%
#            select(1:3,5:7,4,8)
names(phe_isr) <- c("row_label", "observed", "expected", "reference_rate",
"isr","lowercl","uppercl","confidence","method")
}
return(phe_isr)
}
phe_isr(test_ISR_multiarea$count,
test_ISR_multiarea$pop,
test_ISR_refdata$refcount,
test_ISR_refdata$refpop,
groupref=test_ISR_multiarea$area, ratio=FALSE)
devtools::document()
??phe_rate
# create function to calculate rate and CIs using Byar's method
phe_rate <- function(data,x, n, type = "combined", conf.level = 0.95, multiplier = 100000) {
# check required arguments present
if (missing(data)) {
stop("data must contain a data.frame object")
} else if (missing(x)) {
stop("x must contain an unquoted field name from data")
} else if (missing(n)) {
stop("n must contain an unquoted field name from data")
}
# apply quotes
x <- enquo(x)
n <- enquo(n)
# validate arguments
if (any(x < 0)) {
stop("numerators must be greater than or equal to zero")
} else if (any(n <= 0)) {
stop("denominators must be greater than zero")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
} else if (length(x) != length(n)|length(x) != length(row_label)) {
stop("numerator, denominator and row label vectors must be of equal length")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# calculate rate and CIs
phe_rate <- data %>%
mutate(rate = x/n*multiplier,
lowercl = if_else(x < 10, qchisq((1-conf.level)/2,2*x)/2/n*multiplier,
byars_lower(x,conf.level)/n*multiplier),
uppercl = if_else(x < 10, qchisq(conf.level+(1-conf.level)/2,2*x+2)/2/n*multiplier,
byars_upper(x,conf.level)/n*multiplier),
confidence = paste(conf.level*100,"%"),
method  = if_else(x < 10, "Exact","Byars"))
if (type == "lower") {
phe_rate <- phe_rate %>%
select(-uppercl, -rate, -method, -confidence)
} else if (type == "upper") {
phe_rate <- phe_rate %>%
select(-lowercl, -rate, -method, -confidence)
} else if (type == "rate") {
phe_rate<- phe_rate %>%
select(-lowercl, -uppercl, -method, -confidence)
} else if (type == "combined") {
phe_rate <- phe_rate %>%
select(-method, -confidence)
}
return(phe_rate)
}
phe_rate(65,100,"ALL")
phe_rate(65,100)
View(test_Rate_100)
phe_rate(test_Rate_100,Numerator, Denominator)
# create function to calculate rate and CIs using Byar's method
phe_rate <- function(data,x, n, type = "combined", conf.level = 0.95, multiplier = 100000) {
# check required arguments present
if (missing(data)) {
stop("data must contain a data.frame object")
} else if (missing(x)) {
stop("x must contain an unquoted field name from data")
} else if (missing(n)) {
stop("n must contain an unquoted field name from data")
}
# apply quotes
x <- enquo(x)
n <- enquo(n)
# validate arguments
if (any(!!x < 0)) {
stop("numerators must be greater than or equal to zero")
} else if (any(!n <= 0)) {
stop("denominators must be greater than zero")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# calculate rate and CIs
phe_rate <- data %>%
mutate(rate = !!x/!!n*multiplier,
lowercl = if_else(!!x < 10, qchisq((1-conf.level)/2,2*!!x)/2/n*multiplier,
byars_lower(!!x,conf.level)/!!n*multiplier),
uppercl = if_else(!!x < 10, qchisq(conf.level+(1-conf.level)/2,2*x+2)/2/!!n*multiplier,
byars_upper(!!x,conf.level)/!!n*multiplier),
confidence = paste(conf.level*100,"%"),
method  = if_else(!!x < 10, "Exact","Byars"))
if (type == "lower") {
phe_rate <- phe_rate %>%
select(-uppercl, -rate, -method, -confidence)
} else if (type == "upper") {
phe_rate <- phe_rate %>%
select(-lowercl, -rate, -method, -confidence)
} else if (type == "rate") {
phe_rate<- phe_rate %>%
select(-lowercl, -uppercl, -method, -confidence)
} else if (type == "combined") {
phe_rate <- phe_rate %>%
select(-method, -confidence)
}
return(phe_rate)
}
phe_rate(test_Rate_100,Numerator, Denominator)
phe_rate <- function(data,x, n, type = "combined", conf.level = 0.95, multiplier = 100000) {
# check required arguments present
if (missing(data)) {
stop("data must contain a data.frame object")
} else if (missing(x)) {
stop("x must contain an unquoted field name from data")
} else if (missing(n)) {
stop("n must contain an unquoted field name from data")
}
# apply quotes
x <- enquo(x)
n <- enquo(n)
# validate arguments
if (any(pull(data, !!x) < 0)) {
stop("numerators must be greater than or equal to zero")
} else if (any(pull(data, !!n) <= 0)) {
stop("denominators must be greater than zero")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# calculate rate and CIs
phe_rate <- data %>%
mutate(rate = !!x/!!n*multiplier,
lowercl = if_else(!!x < 10, qchisq((1-conf.level)/2,2*!!x)/2/n*multiplier,
byars_lower(!!x,conf.level)/!!n*multiplier),
uppercl = if_else(!!x < 10, qchisq(conf.level+(1-conf.level)/2,2*x+2)/2/!!n*multiplier,
byars_upper(!!x,conf.level)/!!n*multiplier),
confidence = paste(conf.level*100,"%"),
method  = if_else(!!x < 10, "Exact","Byars"))
if (type == "lower") {
phe_rate <- phe_rate %>%
select(-uppercl, -rate, -method, -confidence)
} else if (type == "upper") {
phe_rate <- phe_rate %>%
select(-lowercl, -rate, -method, -confidence)
} else if (type == "rate") {
phe_rate<- phe_rate %>%
select(-lowercl, -uppercl, -method, -confidence)
} else if (type == "combined") {
phe_rate <- phe_rate %>%
select(-method, -confidence)
}
return(phe_rate)
}
phe_rate(test_Rate_100,Numerator, Denominator)
# create function to calculate rate and CIs using Byar's method
phe_rate <- function(data,x, n, type = "combined", conf.level = 0.95, multiplier = 100000) {
# check required arguments present
if (missing(data)) {
stop("data must contain a data.frame object")
} else if (missing(x)) {
stop("x must contain an unquoted field name from data")
} else if (missing(n)) {
stop("n must contain an unquoted field name from data")
}
# apply quotes
x <- enquo(x)
n <- enquo(n)
# validate arguments
if (any(pull(data, !!x) < 0)) {
stop("numerators must be greater than or equal to zero")
} else if (any(pull(data, !!n) <= 0)) {
stop("denominators must be greater than zero")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# calculate rate and CIs
phe_rate <- data %>%
mutate(rate = !!x/!!n*multiplier,
lowercl = if_else(!!x < 10, qchisq((1-conf.level)/2,2*!!x)/2/!!n*multiplier,
byars_lower(!!x,conf.level)/!!n*multiplier),
uppercl = if_else(!!x < 10, qchisq(conf.level+(1-conf.level)/2,2*x+2)/2/!!n*multiplier,
byars_upper(!!x,conf.level)/!!n*multiplier),
confidence = paste(conf.level*100,"%"),
method  = if_else(!!x < 10, "Exact","Byars"))
if (type == "lower") {
phe_rate <- phe_rate %>%
select(-uppercl, -rate, -method, -confidence)
} else if (type == "upper") {
phe_rate <- phe_rate %>%
select(-lowercl, -rate, -method, -confidence)
} else if (type == "rate") {
phe_rate<- phe_rate %>%
select(-lowercl, -uppercl, -method, -confidence)
} else if (type == "combined") {
phe_rate <- phe_rate %>%
select(-method, -confidence)
}
return(phe_rate)
}
phe_rate(test_Rate_100,Numerator, Denominator)
# create function to calculate rate and CIs using Byar's method
phe_rate <- function(data,x, n, type = "combined", conf.level = 0.95, multiplier = 100000) {
# check required arguments present
if (missing(data)) {
stop("data must contain a data.frame object")
} else if (missing(x)) {
stop("x must contain an unquoted field name from data")
} else if (missing(n)) {
stop("n must contain an unquoted field name from data")
}
# apply quotes
x <- enquo(x)
n <- enquo(n)
# validate arguments
if (any(pull(data, !!x) < 0)) {
stop("numerators must be greater than or equal to zero")
} else if (any(pull(data, !!n) <= 0)) {
stop("denominators must be greater than zero")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# calculate rate and CIs
phe_rate <- data %>%
mutate(rate = !!x/!!n*multiplier,
lowercl = if_else(!!x < 10, qchisq((1-conf.level)/2,2*!!x)/2/!!n*multiplier,
byars_lower(!!x,conf.level)/!!n*multiplier),
uppercl = if_else(!!x < 10, qchisq(conf.level+(1-conf.level)/2,2*!!x+2)/2/!!n*multiplier,
byars_upper(!!x,conf.level)/!!n*multiplier),
confidence = paste(conf.level*100,"%"),
method  = if_else(!!x < 10, "Exact","Byars"))
if (type == "lower") {
phe_rate <- phe_rate %>%
select(-uppercl, -rate, -method, -confidence)
} else if (type == "upper") {
phe_rate <- phe_rate %>%
select(-lowercl, -rate, -method, -confidence)
} else if (type == "rate") {
phe_rate<- phe_rate %>%
select(-lowercl, -uppercl, -method, -confidence)
} else if (type == "combined") {
phe_rate <- phe_rate %>%
select(-method, -confidence)
}
return(phe_rate)
}
phe_rate(test_Rate_100,Numerator, Denominator)
# create function to calculate rate and CIs using Byar's method
phe_rate <- function(data,x, n, type = "combined", conf.level = 0.95, multiplier = 100000) {
# check required arguments present
if (missing(data)) {
stop("data must contain a data.frame object")
} else if (missing(x)) {
stop("x must contain an unquoted field name from data")
} else if (missing(n)) {
stop("n must contain an unquoted field name from data")
}
# apply quotes
x <- enquo(x)
n <- enquo(n)
# validate arguments
if (any(pull(data, !!x) < 0)) {
stop("numerators must be greater than or equal to zero")
} else if (any(pull(data, !!n) <= 0)) {
stop("denominators must be greater than zero")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# calculate rate and CIs
phe_rate <- data %>%
mutate(rate = (!!x)/(!!n)*multiplier,
lowercl = if_else((!!x) < 10, qchisq((1-conf.level)/2,2*(!!x))/2/(!!n)*multiplier,
byars_lower((!!x),conf.level)/(!!n)*multiplier),
uppercl = if_else((!!x) < 10, qchisq(conf.level+(1-conf.level)/2,2*!!x+2)/2/(!!n)*multiplier,
byars_upper((!!x),conf.level)/(!!n)*multiplier),
confidence = paste(conf.level*100,"%"),
method  = if_else((!!x) < 10, "Exact","Byars"))
if (type == "lower") {
phe_rate <- phe_rate %>%
select(-uppercl, -rate, -method, -confidence)
} else if (type == "upper") {
phe_rate <- phe_rate %>%
select(-lowercl, -rate, -method, -confidence)
} else if (type == "rate") {
phe_rate<- phe_rate %>%
select(-lowercl, -uppercl, -method, -confidence)
} else if (type == "combined") {
phe_rate <- phe_rate %>%
select(-method, -confidence)
}
return(phe_rate)
}
phe_rate(test_Rate_100,Numerator, Denominator)
# create function to calculate rate and CIs using Byar's method
phe_rate <- function(data,x, n, type = "combined", conf.level = 0.95, multiplier = 100000) {
# check required arguments present
if (missing(data)) {
stop("data must contain a data.frame object")
} else if (missing(x)) {
stop("x must contain an unquoted field name from data")
} else if (missing(n)) {
stop("n must contain an unquoted field name from data")
}
# apply quotes
x <- enquo(x)
n <- enquo(n)
# validate arguments
if (any(pull(data, !!x) < 0)) {
stop("numerators must be greater than or equal to zero")
} else if (any(pull(data, !!n) <= 0)) {
stop("denominators must be greater than zero")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# calculate rate and CIs
phe_rate <- data %>%
mutate(rate = (!!x)/(!!n)*multiplier,
lowercl = if_else((!!x) < 10, qchisq((1-conf.level)/2,2*(!!x))/2/(!!n)*multiplier,
byars_lower((!!x),conf.level)/(!!n)*multiplier),
uppercl = if_else((!!x) < 10, qchisq(conf.level+(1-conf.level)/2,2*(!!x)+2)/2/(!!n)*multiplier,
byars_upper((!!x),conf.level)/(!!n)*multiplier),
confidence = paste(conf.level*100,"%"),
method  = if_else((!!x) < 10, "Exact","Byars"))
if (type == "lower") {
phe_rate <- phe_rate %>%
select(-uppercl, -rate, -method, -confidence)
} else if (type == "upper") {
phe_rate <- phe_rate %>%
select(-lowercl, -rate, -method, -confidence)
} else if (type == "rate") {
phe_rate<- phe_rate %>%
select(-lowercl, -uppercl, -method, -confidence)
} else if (type == "combined") {
phe_rate <- phe_rate %>%
select(-method, -confidence)
}
return(phe_rate)
}
phe_rate(test_Rate_100,Numerator, Denominator)
phe_rate(test_Rate_100,Numerator, Denominator, type="full")
checkk <- phe_rate(test_Rate_100,Numerator, Denominator, type="full")
View(checkk)
# create phe_proportion function to execute binom.confint with method fixed to wilson
phe_proportion <- function(data, x, n, type="combined", conf.level=0.95, percentage=FALSE) {
# check required arguments present
if (missing(data)) {
stop("data must contain a data.frame object")
} else if (missing(x)) {
stop("x must contain an unquoted field name from data")
} else if (missing(n)) {
stop("n must contain an unquoted field name from data")
}
# apply quotes
x <- enquo(x)
n <- enquo(n)
# validate arguments
if (any(pull(data, !!x) < 0)) {
stop("numerators must be greater than or equal to zero")
} else if (any(pull(data, !!n) <= 0)) {
stop("denominators must be greater than zero")
} else if (any(pull(data, !!x) > pull(data, !!n))) {
stop("numerators must be less than or equal to denominator for a proportion statistic")
} else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# set multiplier
multiplier <- 1
if (percentage == TRUE) {
multiplier <- 100
}
# calculate proportion and CIs
phe_proportion <- data %>%
binom.confint((!!x), (!!n), conf.level, methods="wilson") %>%
mutate(mean = mean * multiplier,
lower = lower * multiplier,
upper = upper * multiplier,
confidence = paste(conf.level*100,"%"),
method = "Wilson") %>%
select(-methods)
return(phe_proportion)
}
View(test_Prop_1)
phe_proportion(test_Prop_1,numerator, Denominator)
phe_proportion(test_Prop_1,Numerator, Denominator)
