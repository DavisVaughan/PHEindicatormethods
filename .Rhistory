test_Prop_1   <- read_excel(".\\tests\\testthat\\testdata_Proportion.xlsx", sheet="testdata_Prop_1",   col_names=TRUE)
test_Prop_100 <- read_excel(".\\tests\\testthat\\testdata_Proportion.xlsx", sheet="testdata_Prop_100", col_names=TRUE)
test_Prop_1$Area   <- as.factor(test_Prop_1$Area)
test_Prop_100$Area <- as.factor(test_Prop_100$Area)
#Rates
test_Rate_100000 <- read_excel(".\\tests\\testthat\\testdata_Rate.xlsx", sheet="testdata_Rate_100000", col_names=TRUE)
test_Rate_100    <- read_excel(".\\tests\\testthat\\testdata_Rate.xlsx", sheet="testdata_Rate_100",    col_names=TRUE)
test_Rate_100$Area      <- as.factor(test_Rate_100$Area)
test_Rate_100000$Area   <- as.factor(test_Rate_100000$Area)
# DSRs
test_DSR_multiarea <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testdata_multiarea", col_names=TRUE)
test_DSR_1976      <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testdata_1976",      col_names=TRUE)
test_DSR_err1      <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testdata_err1",      col_names=TRUE)
test_DSR_err2      <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testdata_err2",      col_names=TRUE)
test_DSR_err3      <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testdata_err3",      col_names=TRUE)
test_DSR_results   <- read_excel(".\\tests\\testthat\\testdata_DSR.xlsx", sheet="testresults",        col_names=TRUE)
test_DSR_results$group <- as.factor(test_DSR_results$group)
# ISRs
test_ISR_multiarea <- read_excel(".\\tests\\testthat\\testdata_ISR.xlsx", sheet="testdata_multiarea", col_names=TRUE)
test_ISR_err1      <- read_excel(".\\tests\\testthat\\testdata_ISR.xlsx", sheet="testdata_err1",      col_names=TRUE)
test_ISR_err2      <- read_excel(".\\tests\\testthat\\testdata_ISR.xlsx", sheet="testdata_err2",      col_names=TRUE)
test_ISR_err3      <- read_excel(".\\tests\\testthat\\testdata_ISR.xlsx", sheet="testdata_err3",      col_names=TRUE)
test_ISR_results   <- read_excel(".\\tests\\testthat\\testdata_ISR.xlsx", sheet="testresults",        col_names=TRUE)
test_ISR_refdata   <- read_excel(".\\tests\\testthat\\testdata_ISR.xlsx", sheet="refdata",            col_names=TRUE)
test_ISR_results$group <- as.factor(test_ISR_results$group)
devtools::use_data(test_Prop_1, test_Prop_100,
test_Rate_100, test_Rate_100000,
test_DSR_multiarea, test_DSR_1976, test_DSR_err1, test_DSR_err2, test_DSR_err3, test_DSR_results,
test_ISR_multiarea, test_ISR_refdata, test_ISR_err1, test_ISR_err2, test_ISR_err3, test_ISR_results,
internal = TRUE, overwrite = TRUE)
devtools::test()
data.frame(phe_isr(test_ISR_multiarea$count,
test_ISR_multiarea$pop,
test_ISR_refdata$refcount,
select(filter(test_ISR_err1,test_ISR_err1$area == "testdata_big"),4),
groupref=test_ISR_err3$area))[1:6]
select(filter(test_ISR_err1,test_ISR_err1$area == "testdata_big"),4)
View(test_ISR_err1)
View(test_ISR_err2)
data.frame(phe_isr(test_ISR_multiarea$count,
test_ISR_multiarea$pop,
test_ISR_refdata$refcount,
select(filter(test_ISR_err1,test_ISR_err2$area == "testdata_big"),4),
groupref=test_ISR_err3$area))[1:6]
select(filter(test_ISR_err1,test_ISR_err2$area == "testdata_big"),4)
data.frame(phe_isr(test_ISR_multiarea$count,
test_ISR_multiarea$pop,
test_ISR_refdata$refcount,
select(filter(test_ISR_err2,test_ISR_err2$area == "testdata_big"),4),
groupref=test_ISR_err3$area))[1:6]
expect_error(data.frame(phe_isr(test_ISR_multiarea$count,
test_ISR_multiarea$pop,
test_ISR_refdata$refcount,
select(filter(test_ISR_err2,test_ISR_err2$area == "testdata_big"),4),
groupref=test_ISR_err3$area))[1:6],
"reference denominators must all be greater than zero", info="error test5")
View(test_ISR_err3)
View(test_ISR_err2)
test_ISR_err3      <- read_excel(".\\tests\\testthat\\testdata_ISR.xlsx", sheet="testdata_err3",      col_names=TRUE)
devtools::use_data(test_Prop_1, test_Prop_100,
test_Rate_100, test_Rate_100000,
test_DSR_multiarea, test_DSR_1976, test_DSR_err1, test_DSR_err2, test_DSR_err3, test_DSR_results,
test_ISR_multiarea, test_ISR_refdata, test_ISR_err1, test_ISR_err2, test_ISR_err3, test_ISR_results,
internal = TRUE, overwrite = TRUE)
expect_error(data.frame(phe_isr(test_ISR_multiarea$count,
test_ISR_multiarea$pop,
test_ISR_refdata$refcount,
select(filter(test_ISR_err3,test_ISR_err3$area == "testdata_big"),4),
groupref=test_ISR_err3$area))[1:6],
"reference denominators must all be greater than zero", info="error test5")
expect_error(data.frame(phe_isr(test_ISR_err1$count,
test_ISR_err1$pop,
test_ISR_refdata$refcount,
test_ISR_refdata$refpop,
groupref=test_ISR_err1$area,
conf.level = 0.8))[1:6],
"confidence level must be between 90 and 100 or between 0.9 and 1")
expect_error(data.frame(phe_isr(test_ISR_multiarea$count,
test_ISR_multiarea$pop,
test_ISR_refdata$refcount,
test_ISR_refdata$refpop,
groupref=test_ISR_multiarea$area,
conf.level = 0.8))[1:6],
"confidence level must be between 90 and 100 or between 0.9 and 1")
expect_error(data.frame(phe_isr(test_ISR_multiarea$count,
test_ISR_multiarea$pop,
test_ISR_refdata$refcount,
test_ISR_refdata$refpop,
groupref=test_ISR_multiarea$area,
conf.level = 1.5))[1:6],
"confidence level must be between 90 and 100 or between 0.9 and 1", info="error test8")
data.frame(phe_isr(select(filter(test_ISR_multiarea,test_ISR_multiarea$area == "testdata_big"),count),
test_ISR_multiarea$pop,
test_ISR_refdata$refcount,
test_ISR_refdata$refpop,
groupref=test_ISR_multiarea$area))[1:6]
expect_error(data.frame(phe_isr(select(filter(test_ISR_multiarea,test_ISR_multiarea$area == "testdata_big"),count),
test_ISR_multiarea$pop,
test_ISR_refdata$refcount,
test_ISR_refdata$refpop,
groupref=test_ISR_multiarea$area))[1:6],
"numerator and denominator vectors must be of equal length", info="error test9")
View(test_ISR_refdata)
select(filter(test_ISR_refdata,test_ISR_refdata$refcount > 3000),refpop)
data.frame(phe_isr(test_ISR_multiarea$count,
test_ISR_multiarea$pop,
test_ISR_refdata$refcount,
select(filter(test_ISR_refdata,test_ISR_refdata$refcount > 3000),refpop),
groupref=test_ISR_multiarea$area))[1:6]
expect_error(data.frame(phe_isr(test_ISR_multiarea$count,
test_ISR_multiarea$pop,
test_ISR_refdata$refcount,
select(filter(test_ISR_refdata,test_ISR_refdata$refcount > 3000),refpop),
groupref=test_ISR_multiarea$area)),
"reference numerator and reference denominator vectors must be of equal length", info="error test10")
expect_error(data.frame(phe_isr(test_ISR_multiarea$count,
test_ISR_multiarea$pop,
select(filter(test_ISR_refdata,test_ISR_refdata$refcount > 3000),refpop),
test_ISR_refdata$refpop,
groupref=test_ISR_multiarea$area)),
"numerator vector length must be a multiple of the reference numerator vector length", info="error test11")
expect_error(data.frame(phe_isr(test_ISR_multiarea$count,
test_ISR_multiarea$pop,
select(filter(test_ISR_refdata,test_ISR_refdata$refcount > 3000),refcount),
select(filter(test_ISR_refdata,test_ISR_refdata$refcount > 3000),refpop),
groupref=test_ISR_multiarea$area)),
"numerator vector length must be a multiple of the reference numerator vector length", info="error test11")
test_ISR_multiarea$count
devtools::test()
c(1,2,3,4) * c(1,2,3)
library(rmarkdown)
devtools::use_vignette("DSR-vignette")
?rmarkdown
install.packages("rmarkdown")
install.packages("rmarkdown")
library(PHEstatmethods)
library(rmarkdown)
devtools::use_vignette("DSR-vignette")
library(dplyr)
library(testthat)
library(devtools)
library(binom)
library(readxl)
select(filter(test_ISR_results,test_ISR_results$type == "rate_100000"),2:7)
mtcars$hp[mtcars$cyl == 4]
str(mtcars)
test_ISR_results[2:7,test_ISR_results$type == "rate_100000"]
options(scipen=999)
test_ISR_results[2:7,test_ISR_results$type == "rate_100000"]
test_ISR_results[,test_ISR_results$type == "rate_100000"]
head(test_ISR_results)
select(filter(test_ISR_results,test_ISR_results$type == "rate_100000"),2:7)
select(test_ISR_results[test_ISR_results$type == "rate_100000"],2:7)
test_ISR_results[test_ISR_results$type == "rate_100000"]
test_ISR_results
data.frame(phe_isr(test_ISR_multiarea$count,
test_ISR_multiarea$pop,
test_ISR_refdata$refcount,
test_ISR_refdata$refpop,
groupref=test_ISR_multiarea$area,
ratio = FALSE))[1:6]
library(PHEstatmethods)
?mean
x <- c(1,2,3,4,5)
count(x)
length(x)
?sd
x <- c 43.09,47.07,61.13,51.75,52.99,54.16,68.47,48.81,48.94,33.26)
x <- c(43.09,47.07,61.13,51.75,52.99,54.16,68.47,48.81,48.94,33.26)
total <- sum9x)
total <- sum(x)
numrecs <- length(x)
stdev <- sd(x)
mean <- total/numrecs
mean
mean
stdev
lowercl <- mean-abs(qt(0.025,numrecs-1))*stdev/SQRT(numrecs)
?sqrt
lowercl <- mean-abs(qt(0.025,numrecs-1))*stdev/sqrt(numrecs)
lowercl
uppercl = mean + abs(qt(0.025, numrecs - 1)) * stdev / SQRT(numrecs)
uppercl = mean + abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs)
uppercl
phe_mean <- data.frame(x, groupref) %>%
group_by(groupref) %>%
summarise(total   = sum(x),
numrecs = length(x),
stdev   = sd(x)) %>%
mutate(mean = total / numrecs,
lowercl = mean - abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs),
uppercl = mean + abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs))
groupref <- 1
phe_mean <- data.frame(x, groupref) %>%
group_by(groupref) %>%
summarise(total   = sum(x),
numrecs = length(x),
stdev   = sd(x)) %>%
mutate(mean = total / numrecs,
lowercl = mean - abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs),
uppercl = mean + abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs))
phe_mean
phe_mean <- data.frame(x, groupref) %>%
group_by(groupref) %>%
summarise(total   = sum(x),
numrecs = length(x),
stdev   = sd(x)) %>%
mutate(mean = total / numrecs,
lowercl = mean - abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs),
uppercl = mean + abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs)) %>%
select(1,2,3,5,4,6,7)
phe_mean
phe_mean <- data.frame(x, groupref) %>%
group_by(groupref) %>%
summarise(total   = sum(x),
numrecs = length(x),
stdev   = sd(x)) %>%
mutate(mean = total / numrecs,
lowercl = mean - abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs),
uppercl = mean + abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs),
method = "t-distribution") %>%
select(1,2,3,5,4,6,7)
# set column names
names(phe_mean) <- c("row label","value_sum","value_count","mean","stdev",
paste("lower",conf.level*100,"cl",sep=""),
paste("upper",conf.level*100,"cl",sep=""),"method")
phe_mean <- function(x, groupref, conf.level=0.95) {
# validate arguments - copied from proportion need editing
#  if (any(x < 0)) {
#    stop("numerators must be greater than or equal to zero")
#  } else if (any(n <= 0)) {
#    stop("denominators must be greater than zero")
#  } else if (any(x > n)) {
#    stop("numerators must be less than or equal to denominator for a proportion statistic")
#  } else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
#    stop("confidence level must be between 90 and 100 or between 0.9 and 1")
#  } else if (length(x) != length(n)) {
#    stop("numerator and denominator vectors must be of equal length")
#  }
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# calculate proportion and CIs
phe_mean <- data.frame(x, groupref) %>%
group_by(groupref) %>%
summarise(total   = sum(x),
numrecs = length(x),
stdev   = sd(x)) %>%
mutate(mean = total / numrecs,
lowercl = mean - abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs),
uppercl = mean + abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs),
method = "t-distribution") %>%
select(1,2,3,5,4,6,7)
# set column names
names(phe_mean) <- c("row label","value_sum","value_count","mean","stdev",
paste("lower",conf.level*100,"cl",sep=""),
paste("upper",conf.level*100,"cl",sep=""),"method")
return(phe_proportion)
}
test_Mean         <- read_excel(".\\tests\\testthat\\testdata_Mean.xlsx", sheet="testdata_Mean",    col_names=TRUE)
test_Mean_results <- read_excel(".\\tests\\testthat\\testdata_Mean.xlsx", sheet="testdata_Results", col_names=TRUE)
test_Mean_results <- read_excel(".\\tests\\testthat\\testdata_Mean.xlsx", sheet="testdata_Mean_Results", col_names=TRUE)
test_Mean_results <- read_excel(".\\tests\\testthat\\testdata_Mean.xlsx", sheet="testdata_Mean_results", col_names=TRUE)
View(test_Mean)
View(test_Mean_results)
test_Mean$Area         <- as.factor(test_Mean$Area)
test_Mean_Results$Area <- as.factor(test_Mean_results$Area)
test_Mean$Area         <- as.factor(test_Mean$Area)
test_Mean_results$Area <- as.factor(test_Mean_results$Area)
test_Mean$area         <- as.factor(test_Mean$area)
test_Mean_results$area <- as.factor(test_Mean_results$area)
View(test_Mean)
test_Mean         <- read_excel(".\\tests\\testthat\\testdata_Mean.xlsx", sheet="testdata_Mean",         col_names=TRUE)
test_Mean_results <- read_excel(".\\tests\\testthat\\testdata_Mean.xlsx", sheet="testdata_Mean_results", col_names=TRUE)
test_Mean$area         <- as.factor(test_Mean$area)
test_Mean_results$area <- as.factor(test_Mean_results$area)
# use this code to save loaded data to sysdata folder:
devtools::use_data(test_Prop_1, test_Prop_100,
test_Rate_100, test_Rate_100000,
test_Mean, test_Mean_results,
test_DSR_multiarea, test_DSR_1976, test_DSR_err1, test_DSR_err2, test_DSR_err3, test_DSR_results,
test_ISR_multiarea, test_ISR_refdata, test_ISR_err1, test_ISR_err2, test_ISR_err3, test_ISR_results,
internal = TRUE, overwrite = TRUE)
data.frame(phe_mean(test_Mean$values)
)
phe_mean <- function(x, groupref = "No grouping", conf.level=0.95) {
# validate arguments - copied from proportion need editing
#  if (any(x < 0)) {
#    stop("numerators must be greater than or equal to zero")
#  } else if (any(n <= 0)) {
#    stop("denominators must be greater than zero")
#  } else if (any(x > n)) {
#    stop("numerators must be less than or equal to denominator for a proportion statistic")
#  } else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
#    stop("confidence level must be between 90 and 100 or between 0.9 and 1")
#  } else if (length(x) != length(n)) {
#    stop("numerator and denominator vectors must be of equal length")
#  }
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# calculate proportion and CIs
phe_mean <- data.frame(x, groupref) %>%
group_by(groupref) %>%
summarise(total   = sum(x),
numrecs = length(x),
stdev   = sd(x)) %>%
mutate(mean = total / numrecs,
lowercl = mean - abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs),
uppercl = mean + abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs),
method = "t-distribution") %>%
select(1,2,3,5,4,6,7)
# set column names
names(phe_mean) <- c("row label","value_sum","value_count","mean","stdev",
paste("lower",conf.level*100,"cl",sep=""),
paste("upper",conf.level*100,"cl",sep=""),"method")
return(phe_proportion)
}
ata.frame(phe_mean(test_Mean$values))
data.frame(phe_mean(test_Mean$values))
phe_mean <- data.frame(x, groupref) %>%
group_by(groupref) %>%
summarise(total   = sum(x),
numrecs = length(x),
stdev   = sd(x)) %>%
mutate(mean = total / numrecs,
lowercl = mean - abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs),
uppercl = mean + abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs),
method = "t-distribution")
phe_mean
# create phe_proportion function to execute binom.confint with method fixed to wilson
phe_mean <- function(x, groupref = "No grouping", conf.level=0.95) {
# validate arguments - copied from proportion need editing
#  if (any(x < 0)) {
#    stop("numerators must be greater than or equal to zero")
#  } else if (any(n <= 0)) {
#    stop("denominators must be greater than zero")
#  } else if (any(x > n)) {
#    stop("numerators must be less than or equal to denominator for a proportion statistic")
#  } else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
#    stop("confidence level must be between 90 and 100 or between 0.9 and 1")
#  } else if (length(x) != length(n)) {
#    stop("numerator and denominator vectors must be of equal length")
#  }
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# calculate proportion and CIs
phe_mean <- data.frame(x, groupref) %>%
group_by(groupref) %>%
summarise(total   = sum(x),
numrecs = length(x),
stdev   = sd(x)) %>%
mutate(mean = total / numrecs,
lowercl = mean - abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs),
uppercl = mean + abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs),
method = "t-distribution") %>%
select(1,2,3,5,4,6,7,8)
# set column names
names(phe_mean) <- c("row label","value_sum","value_count","mean","stdev",
paste("lower",conf.level*100,"cl",sep=""),
paste("upper",conf.level*100,"cl",sep=""),"method")
return(phe_proportion)
}
data.frame(phe_mean(test_Mean$values))
phe_mean <- function(x, groupref = "No grouping", conf.level=0.95) {
# validate arguments - copied from proportion need editing
#  if (any(x < 0)) {
#    stop("numerators must be greater than or equal to zero")
#  } else if (any(n <= 0)) {
#    stop("denominators must be greater than zero")
#  } else if (any(x > n)) {
#    stop("numerators must be less than or equal to denominator for a proportion statistic")
#  } else if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
#    stop("confidence level must be between 90 and 100 or between 0.9 and 1")
#  } else if (length(x) != length(n)) {
#    stop("numerator and denominator vectors must be of equal length")
#  }
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# calculate proportion and CIs
phe_mean <- data.frame(x, groupref) %>%
group_by(groupref) %>%
summarise(total   = sum(x),
numrecs = length(x),
stdev   = sd(x)) %>%
mutate(mean = total / numrecs,
lowercl = mean - abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs),
uppercl = mean + abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs),
method  = "t-distribution") %>%
select(1,2,3,5,4,6,7,8)
# set column names
names(phe_mean) <- c("row label","value_sum","value_count","mean","stdev",
paste("lower",conf.level*100,"cl",sep=""),
paste("upper",conf.level*100,"cl",sep=""),"method")
return(phe_mean)
}
data.frame(phe_mean(test_Mean$values))
data.frame(phe_dsr(test_DSR_multiarea$count,
test_DSR_multiarea$pop,
stdpop = esp2013,
groupref=test_DSR_multiarea$area,
multiplier=10000)[1:6])
View(test_Mean_results)
test_Mean         <- read_excel(".\\tests\\testthat\\testdata_Mean.xlsx", sheet="testdata_Mean",         col_names=TRUE)
test_Mean_results <- read_excel(".\\tests\\testthat\\testdata_Mean.xlsx", sheet="testdata_Mean_results", col_names=TRUE)
test_Mean$area         <- as.factor(test_Mean$area)
test_Mean_results$area <- as.factor(test_Mean_results$area)
data.frame(phe_mean(test_Mean$values))
filter(test_Mean_results,group == "No grouping")
View(test_Mean_results)
filter(test_Mean_results,area == "No grouping")
expect_equal(data.frame(phe_mean(test_Mean$values))[1:7],
select(filter(test_Mean_results,area == "No grouping"),1:7),
check.attributes=FALSE, check.names=FALSE,info="test1")
data.frame(phe_mean(test_Mean$values,groupref = area))[1:7]
data.frame(phe_mean(test_Mean$values,groupref = test_Mean$area))[1:7]
select(filter(test_Mean_results,area != "No grouping"),1:7)
expect_equal(data.frame(phe_mean(test_Mean$values))[1:7],
select(filter(test_Mean_results,area == "No grouping"),1:7),
check.attributes=FALSE, check.names=FALSE,info="test1")
expect_equal(data.frame(phe_mean(test_Mean$values,groupref = test_Mean$area))[1:7],
select(filter(test_Mean_results,area != "No grouping"),1:7),
check.attributes=FALSE, check.names=FALSE,info="test1")
phe_mean(c(-2,0,2,4,5))
# -------------------------------------------------------------------------------------------------
#' Calculates a mean with confidence limits using students-t distribution method.
#'
#' @param x the observed values in the sample(s)/population(s); numeric vector; no default
#' @param groupref the grouping sets (eg area codes or area names) if calculating multiple means at once,
#'                 character vector, default = No Grouping
#' @param conf.level the required level of confidence expressed as a number between 0.9 and 1
#'                   or 90 and 100; numeric; default 0.95
#'
#' @return Returns a data frame of row labels, sum of values, count of values, mean, standard deviation,
#'         lower and upper confidence limits and method
#'
#' @examples
#' phe_mean(c(20,30,40), 0.95)
#'
#' @import dplyr
#'
#' @export
#'
#' @family phe statistical functions
#' @seealso \code{\link{phe_proportion}} for proportions,
#'          \code{\link{phe_rate}} for rates,
#'          \code{\link{phe_mean}} for means,
#'          \code{\link{phe_dsr}} for directly standardised rates,
#'          \code{\link{phe_isr}} for indirectly standardised ratios/rates and standardised mortality ratios
# -------------------------------------------------------------------------------------------------
# create phe_proportion function to execute binom.confint with method fixed to wilson
phe_mean <- function(x, groupref = "No grouping", conf.level=0.95) {
# validate arguments - copied from proportion need editing
if ((conf.level<0.9)|(conf.level >1 & conf.level <90)|(conf.level > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
}
# scale confidence level
if (conf.level >= 90) {
conf.level <- conf.level/100
}
# calculate proportion and CIs
phe_mean <- data.frame(x, groupref) %>%
group_by(groupref) %>%
summarise(total   = sum(x),
numrecs = length(x),
stdev   = sd(x)) %>%
mutate(mean = total / numrecs,
lowercl = mean - abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs),
uppercl = mean + abs(qt(0.025, numrecs - 1)) * stdev / sqrt(numrecs),
method  = "t-distribution") %>%
select(1,2,3,5,4,6,7,8)
# set column names
names(phe_mean) <- c("row_label","value_sum","value_count","mean","stdev",
paste("lower",conf.level*100,"cl",sep=""),
paste("upper",conf.level*100,"cl",sep=""),"method")
return(phe_mean)
}
expect_error(data.frame(phe_mean(test_Mean$values,conf.level=12))[1:7],
"confidence level must be between 90 and 100 or between 0.9 and 1",info="error test 1")
data.frame(phe_mean(test_Mean$values,conf.level=12))[1:7]
devtools::document()
library(PHEstatmethods)
library(dplyr)
library(testthat)
library(devtools)
library(binom)
library(readxl)
devtools::document()
devtools::test()
expect_equal(data.frame(phe_mean(test_Mean$values))[1:7],
select(filter(test_Mean_results,area == "No grouping"),1:7),
check.attributes=FALSE, check.names=FALSE,info="test1")
expect_equal(data.frame(phe_mean(test_Mean$values,groupref = test_Mean$area))[1:7],
select(filter(test_Mean_results,area != "No grouping"),1:7),
check.attributes=FALSE, check.names=FALSE,info="test2")
expect_error(data.frame(phe_mean(test_Mean$values,conf.level=12)),
"confidence level must be between 90 and 100 or between 0.9 and 1",info="error test 1")
test_that("means and CIs calculate correctly",{
expect_equal(data.frame(phe_mean(test_Mean$values))[1:7],
select(filter(test_Mean_results,area == "No grouping"),1:7),
check.attributes=FALSE, check.names=FALSE,info="test1")
expect_equal(data.frame(phe_mean(test_Mean$values,groupref = test_Mean$area))[1:7],
select(filter(test_Mean_results,area != "No grouping"),1:7),
check.attributes=FALSE, check.names=FALSE,info="test2")
})
data.frame(phe_mean(test_Mean$values))[1:7]
