QuinaryAgeBandMin as AgeBand, SUM(Population) as Pop
FROM [z_Populations_DEV].[dbo].[vRes_RGN09_FiveYear]
WHERE Period in ('2014','2015','2016')
AND Sex = 4
AND QuinaryAgeBandMin < 75
GROUP BY OfficialCode, GeoName, QuinaryAgeBandMin
ORDER BY OfficialCode, QuinaryAgeBandMin")
odbcClose(dbhandle1)
odbcClose(dbhandle2)
df <- left_join(pops,deaths, by = c("RGN09CD","RGN09NM","AgeBand")) %>%
group_by(RGN09CD)
View(df)
output <- phe_dsr(df,Dths, Population, stdpop = esp2013[1:15], type="full")
output <- phe_dsr(df,Dths, Pop, stdpop = esp2013[1:15], type="full")
View(output)
View(fdataP)
View(fdataP)
fdataP <- filter(fdata, Sex=="Persons")
expect_equal(data.frame(output[1:6]),
data.frame(fdataP[2,7,6,8,9,10]),check.attributes=FALSE, check.names=FALSE))
data.frame(output[1:6])
data.frame(output[1:6]
)
data.frame(fdataP[2,7,6,8,9,10])
fdataP[2,7,6,8,9,10]
fdataP[1:3]
fdataP[2,7,6]
fdataP[[2,7,6,8,9,10]]
fdataP[,[2,7,6,8,9,10]]
select(fdataP,2,7,6,8,9,10)
data.frame(output[1:6])
data.frame(select(fdataP,2,7,6,8,9,10))
expect_equal(data.frame(output[1:6]),
data.frame(select(fdataP,2,7,6,8,9,10)),check.attributes=FALSE, check.names=FALSE))
expect_equal(data.frame(output[1:6]),
data.frame(select(fdataP,2,7,6,8,9,10)),check.attributes=FALSE, check.names=FALSE)
output[1:6]
select(fdataP,2,7,6,8,9,10)
phe_dsr(df,Dths, Pop, stdpop = esp2013[1:15], type="full")[1:6]
df <- left_join(pops,deaths, by = c("RGN09CD","RGN09NM","AgeBand")) %>%
transmute(RGN09CD = as.character(RGN09CD)) %>%
group_by(RGN09CD)
output <- phe_dsr(df,Dths, Pop, stdpop = esp2013[1:15], type="full")
View(df)
df <- left_join(pops,deaths, by = c("RGN09CD","RGN09NM","AgeBand")) %>%
mutate(RGN09CD = as.character(RGN09CD)) %>%
group_by(RGN09CD)
output <- phe_dsr(df,Dths, Pop, stdpop = esp2013[1:15], type="full")
expect_equal(data.frame(phe_dsr(df,Dths, Pop, stdpop = esp2013[1:15], type="full")[1:6]),
data.frame(select(fdataP,2,7,6,8,9,10)),check.attributes=FALSE, check.names=FALSE)
expect_equal(data.frame(phe_dsr(df,Dths, Pop, stdpop = esp2013[1:15], type="full")[1:6]),
data.frame(select(fdataP,2,7,6,8,9,10)),check.attributes=FALSE, check.names=FALSE)
fdata <- fingertips_data(IndicatorID = 108,AreaTypeID = c(101,6)) %>%
filter(Timeperiod == "2014 - 16", AreaType %in% c("Region")) %>%
select(Timeperiod, AreaCode, AreaName, Sex, Age, Denominator,
Count, Value, LowerCI95.0limit, UpperCI95.0limit) %>%
arrange(Timeperiod, AreaCode, Sex) %>%
distinct(Timeperiod, AreaCode, AreaName, Sex, Age, Denominator,
Count, Value, LowerCI95.0limit, UpperCI95.0limit)
dbhandle1 <- odbcDriverConnect('driver={SQL Server};server=SQLClusColLake\\Lake;
database=z_Populations_DEV;Encrypt=true;trusted_connection=true')
dbhandle2 <- odbcDriverConnect('driver={SQL Server};server=SQLClusColLake\\Lake;
database=BirthsDeaths;Encrypt=true;trusted_connection=true')
pops <- sqlQuery(dbhandle1,"SELECT OfficialCode as RGN09CD, GeoName as RGN09NM, Sex,
QuinaryAgeBandMin as AgeBand, SUM(Population) as Pop
FROM [z_Populations_DEV].[dbo].[vRes_RGN09_FiveYear]
WHERE Period in ('2014','2015','2016')
AND QuinaryAgeBandMin < 75
GROUP BY OfficialCode, GeoName, QuinaryAgeBandMin
ORDER BY OfficialCode, QuinaryAgeBandMin")
deaths <- sqlQuery(dbhandle2,"SELECT RGN09CD, RGN09NM, Sex,
CASE WHEN xAge_Year>=90 THEN 90 ELSE FLOOR(CAST(LEFT(xAge_Year,2) AS FLOAT)/5)*5 END AS AgeBand, COUNT(*) AS Dths
FROM BirthsDeaths.dbo.vDeathsALL d
LEFT JOIN LookupsShared.dbo.vLKP_RGN09 l
ON d.GOR_Resi = l.RGN09CDO
WHERE xYEAR in ('2014','2015','2016')
AND CASE WHEN xAge_Year>=90 THEN 90 ELSE FLOOR(CAST(LEFT(xAge_Year,2) AS FLOAT)/5)*5 END < 75
AND RGN09CD IS NOT NULL
GROUP BY RGN09CD, RGN09NM, Sex,
CASE WHEN xAge_Year>=90 THEN 90 ELSE FLOOR(CAST(LEFT(xAge_Year,2) AS FLOAT)/5)*5 END
ORDER BY RGN09CD, AgeBand")
odbcClose(dbhandle1)
odbcClose(dbhandle2)
View(deaths)
dbhandle1 <- odbcDriverConnect('driver={SQL Server};server=SQLClusColLake\\Lake;
database=z_Populations_DEV;Encrypt=true;trusted_connection=true')
dbhandle2 <- odbcDriverConnect('driver={SQL Server};server=SQLClusColLake\\Lake;
database=BirthsDeaths;Encrypt=true;trusted_connection=true')
pops <- sqlQuery(dbhandle1,"SELECT OfficialCode as RGN09CD, GeoName as RGN09NM, Sex,
QuinaryAgeBandMin as AgeBand, SUM(Population) as Pop
FROM [z_Populations_DEV].[dbo].[vRes_RGN09_FiveYear]
WHERE Period in ('2014','2015','2016')
AND QuinaryAgeBandMin < 75
GROUP BY OfficialCode, GeoName, Sex, QuinaryAgeBandMin
ORDER BY OfficialCode, Sex, QuinaryAgeBandMin")
deaths <- sqlQuery(dbhandle2,"SELECT RGN09CD, RGN09NM, Sex,
CASE WHEN xAge_Year>=90 THEN 90 ELSE FLOOR(CAST(LEFT(xAge_Year,2) AS FLOAT)/5)*5 END AS AgeBand, COUNT(*) AS Dths
FROM BirthsDeaths.dbo.vDeathsALL d
LEFT JOIN LookupsShared.dbo.vLKP_RGN09 l
ON d.GOR_Resi = l.RGN09CDO
WHERE xYEAR in ('2014','2015','2016')
AND CASE WHEN xAge_Year>=90 THEN 90 ELSE FLOOR(CAST(LEFT(xAge_Year,2) AS FLOAT)/5)*5 END < 75
AND RGN09CD IS NOT NULL
GROUP BY RGN09CD, RGN09NM, Sex,
CASE WHEN xAge_Year>=90 THEN 90 ELSE FLOOR(CAST(LEFT(xAge_Year,2) AS FLOAT)/5)*5 END
ORDER BY RGN09CD, Sex, AgeBand")
odbcClose(dbhandle1)
odbcClose(dbhandle2)
View(pops)
View(deaths)
deathsM <- filter(deaths, Sex == 1)
popsM <- filter(pops,Sex==1)
dfM <- left_join(popsM,deathsM, by = c("RGN09CD","RGN09NM","AgeBand")) %>%
mutate(RGN09CD = as.character(RGN09CD)) %>%
group_by(RGN09CD)
View(fdata)
# filter male data
deathsM <- filter(deaths, Sex == 1)
popsM <- filter(pops,Sex==1)
# join deaths to pops
dfM <- left_join(popsM,deathsM, by = c("RGN09CD","RGN09NM","AgeBand")) %>%
mutate(RGN09CD = as.character(RGN09CD)) %>%
group_by(RGN09CD)
# execute phe_dsr function
output <- phe_dsr(dfM,Dths, Pop, stdpop = esp2013[1:15], type="full")
# compare to fingertips data for males
expect_equal(data.frame(phe_dsr(df,Dths, Pop, stdpop = esp2013[1:15], type="full")[1:6]),
data.frame(select(filter(fdata,Sex=="Male"),2,7,6,8,9,10)),check.attributes=FALSE, check.names=FALSE)
data.frame(phe_dsr(df,Dths, Pop, stdpop = esp2013[1:15], type="full")[1:6])
data.frame(select(filter(fdata,Sex=="Male"),2,7,6,8,9,10))
View(fdata)
View(output)
# compare to fingertips data for males
expect_equal(data.frame(phe_dsr(dfM,Dths, Pop, stdpop = esp2013[1:15], type="full")[1:6]),
data.frame(select(filter(fdata,Sex=="Male"),2,7,6,8,9,10)),check.attributes=FALSE, check.names=FALSE)
# filter male data
deathsF <- filter(deaths, Sex == 2)
popsF <- filter(pops,Sex==2)
# join deaths to pops
dfF <- left_join(popsF,deathsF, by = c("RGN09CD","RGN09NM","AgeBand")) %>%
mutate(RGN09CD = as.character(RGN09CD)) %>%
group_by(RGN09CD)
# execute phe_dsr function
output <- phe_dsr(dfF,Dths, Pop, stdpop = esp2013[1:15], type="full")
# compare to fingertips data for males
expect_equal(data.frame(phe_dsr(dfF,Dths, Pop, stdpop = esp2013[1:15], type="full")[1:6]),
data.frame(select(filter(fdata,Sex=="Female"),2,7,6,8,9,10)),check.attributes=FALSE, check.names=FALSE)
View(deaths)
View(pops)
# filter male data
popsP <- filter(pops,Sex==4)
# join deaths to pops
dfP <- left_join(popsP,deaths, by = c("RGN09CD","RGN09NM","AgeBand")) %>%
mutate(RGN09CD = as.character(RGN09CD)) %>%
group_by(RGN09CD)
# execute phe_dsr function
output <- phe_dsr(dfP,Dths, Pop, stdpop = esp2013[1:15], type="full")
View(deaths)
deathsP <- deaths %>%
group_by(RGN09CD, RGN09NM, AgeBand) %>%
summarise(Dths = SUM(Dths))
deathsP <- deaths %>%
group_by(RGN09CD, RGN09NM, AgeBand) %>%
summarise(Dths = sum(Dths))
View(deathsP)
View(pops)
popsP <- pops %>%
filter(Sex %in% (1,2)) %>%
popsP <- pops %>%
filter(Sex %in% c(1,2)) %>%
group_by(RGN09CD, RGN09NM, AgeBand) %>%
summarise(Pop = sum(Pop))
View(popsP)
dfP <- left_join(popsP,deathsP, by = c("RGN09CD","RGN09NM","AgeBand")) %>%
mutate(RGN09CD = as.character(RGN09CD)) %>%
group_by(RGN09CD)
popsP <- pops %>%
filter(Sex %in% c(1,2)) %>%
group_by(RGN09CD, RGN09NM, AgeBand) %>%
summarise(Pop = sum(Pop)) %>%
ungroup()
deathsP <- deaths %>%
group_by(RGN09CD, RGN09NM, AgeBand) %>%
summarise(Dths = sum(Dths)) %>%
ungroup
popsP <- pops %>%
filter(Sex %in% c(1,2)) %>%
group_by(RGN09CD, RGN09NM, AgeBand) %>%
summarise(Pop = sum(Pop)) %>%
ungroup()
# join deaths to pops
dfP <- left_join(popsP,deathsP, by = c("RGN09CD","RGN09NM","AgeBand")) %>%
mutate(RGN09CD = as.character(RGN09CD)) %>%
group_by(RGN09CD)
# execute phe_dsr function
outputP <- phe_dsr(dfP,Dths, Pop, stdpop = esp2013[1:15], type="full")
# compare to fingertips data for males
expect_equal(data.frame(phe_dsr(dfP,Dths, Pop, stdpop = esp2013[1:15], type="full")[1:6]),
data.frame(select(filter(fdata,Sex=="Female"),2,7,6,8,9,10)),check.attributes=FALSE, check.names=FALSE)
# compare to fingertips data for males
expect_equal(data.frame(phe_dsr(dfP,Dths, Pop, stdpop = esp2013[1:15], type="full")[1:6]),
data.frame(select(filter(fdata,Sex=="Persons"),2,7,6,8,9,10)),check.attributes=FALSE, check.names=FALSE)
data.frame(phe_dsr(dfP,Dths, Pop, stdpop = esp2013[1:15], type="full")[1:6])
RGN09CD, RGN09NM, AgeBand) %>%
summarise(Dths = sum(Dths))
data.frame(phe_dsr(dfP,Dths, Pop, stdpop = esp2013[1:15], type="full")[1:6])
data.frame(select(filter(fdata,Sex=="Persons"),2,7,6,8,9,10))
deathsP2 <- deaths
popsP2 <- pops %>%
filter(Sex %in% c(1,2))
# join deaths to pops
dfP <- left_join(popsP2,deathsP2, by = c("RGN09CD","RGN09NM","AgeBand")) %>%
mutate(RGN09CD = as.character(RGN09CD)) %>%
group_by(RGN09CD)
dfP2 <- left_join(popsP2,deathsP2, by = c("RGN09CD","RGN09NM","AgeBand")) %>%
mutate(RGN09CD = as.character(RGN09CD)) %>%
group_by(RGN09CD)
View(dfP2)
View(deathsP2)
dfP2 <- left_join(popsP2,deathsP2, by = c("RGN09CD","RGN09NM","Sex","AgeBand")) %>%
mutate(RGN09CD = as.character(RGN09CD)) %>%
group_by(RGN09CD)
View(dfP2)
# execute phe_dsr function
outputP <- phe_dsr(dfP2,Dths, Pop, stdpop = esp2013[1:15], type="full")
# execute phe_dsr function
outputP <- phe_dsr(dfP2,Dths, Pop, stdpop = rep(esp2013[1:15],2), type="full")
data.frame(phe_dsr(dfP2,Dths, Pop, stdpop = rep(esp2013[1:15],2), type="full")[1:6])
data.frame(select(filter(fdata,Sex=="Persons"),2,7,6,8,9,10))
# filter male data
deathsMF <- deaths
popsMF <- pops %>%
filter(Sex %in% c(1,2))
# join deaths to pops
dfMF <- left_join(popsP2,deathsP2, by = c("RGN09CD","RGN09NM","Sex","AgeBand")) %>%
mutate(RGN09CD = as.character(RGN09CD)) %>%
group_by(RGN09CD, Sex)
# execute phe_dsr function
outputP <- phe_dsr(dfMF,Dths, Pop, stdpop = rep(esp2013[1:15],2), type="full")
# filter male data
deathsMF <- deaths
popsMF <- pops %>%
filter(Sex %in% c(1,2))
# join deaths to pops
dfMF <- left_join(popsP2,deathsP2, by = c("RGN09CD","RGN09NM","Sex","AgeBand")) %>%
mutate(RGN09CD = as.character(RGN09CD)) %>%
group_by(RGN09CD, Sex)
# execute phe_dsr function
outputP <- phe_dsr(dfMF,Dths, Pop, stdpop = esp2013[1:15], type="full")
data.frame(phe_dsr(dfMF,Dths, Pop, stdpop = rep(esp2013[1:15],2), type="full")[1:6])
dfMF <- left_join(popsMF,deathsMF, by = c("RGN09CD","RGN09NM","Sex","AgeBand")) %>%
mutate(RGN09CD = as.character(RGN09CD)) %>%
group_by(RGN09CD, Sex)
# execute phe_dsr function
outputP <- phe_dsr(dfMF,Dths, Pop, stdpop = esp2013[1:15], type="full")
data.frame(phe_dsr(dfMF,Dths, Pop, stdpop = rep(esp2013[1:15],2), type="full")[1:6])
summarise(dfMF,n=n())
data.frame(phe_dsr(dfMF,Dths, Pop, stdpop = esp2013[1:15], type="full")[1:6])
data.frame(select(filter(fdata,Sex %in% c("Males","Females"),2,7,6,8,9,10))
)
View(fdata)
data.frame(select(filter(fdata,Sex != "Persons"),2,7,6,8,9,10))
data.frame(phe_dsr(dfMF,Dths, Pop, stdpop = esp2013[1:15], type="full")[1:6])
data.frame(select(filter(fdata,Sex != "Persons"),2,4,7,6,8,9,10))
fdata <- fingertips_data(IndicatorID = 108,AreaTypeID = c(101,6)) %>%
filter(Timeperiod == "2014 - 16", AreaType %in% c("Region")) %>%
mutate(Sex = if_else(Sex=="Male",1,if_else(Sex=="Female",2,4)))
select(Timeperiod, AreaCode, AreaName, Sex, Age, Denominator,
Count, Value, LowerCI95.0limit, UpperCI95.0limit) %>%
arrange(Timeperiod, AreaCode, Sex) %>%
distinct(Timeperiod, AreaCode, AreaName, Sex, Age, Denominator,
Count, Value, LowerCI95.0limit, UpperCI95.0limit)
fdata <- fingertips_data(IndicatorID = 108,AreaTypeID = c(101,6)) %>%
filter(Timeperiod == "2014 - 16", AreaType %in% c("Region")) %>%
mutate(Sex = if_else(Sex=="Male",1,if_else(Sex=="Female",2,4))) %>%
select(Timeperiod, AreaCode, AreaName, Sex, Age, Denominator,
Count, Value, LowerCI95.0limit, UpperCI95.0limit) %>%
arrange(Timeperiod, AreaCode, Sex) %>%
distinct(Timeperiod, AreaCode, AreaName, Sex, Age, Denominator,
Count, Value, LowerCI95.0limit, UpperCI95.0limit)
View(fdata)
deathsMF <- deaths
popsMF <- pops %>%
filter(Sex %in% c(1,2))
# join deaths to pops
dfMF <- left_join(popsMF,deathsMF, by = c("RGN09CD","RGN09NM","Sex","AgeBand")) %>%
mutate(RGN09CD = as.character(RGN09CD)) %>%
group_by(RGN09CD, Sex)
# execute phe_dsr function
outputP <- phe_dsr(dfMF,Dths, Pop, stdpop = esp2013[1:15], type="full")
# compare to fingertips data for males
expect_equal(data.frame(phe_dsr(dfMF,Dths, Pop, stdpop = esp2013[1:15], type="full")[1:6]),
data.frame(select(filter(fdata,Sex != 4),2,4,7,6,8,9,10)),check.attributes=FALSE, check.names=FALSE)
data.frame(phe_dsr(dfMF,Dths, Pop, stdpop = esp2013[1:15], type="full")[1:6])
data.frame(select(filter(fdata,Sex != 4),2,4,7,6,8,9,10))
str(dfF)
head(dfM)
library(knitr)
## Global options
opts_chunk$set(echo=TRUE,
cache=FALSE,
comment = "#>"
)
#Attach packages
library(PHEstatmethods)
library(testthat)
library(fingertipsR)
library(phecharts)
library(RODBC)
library(dplyr)
# filter male data
deathsM <- filter(deaths, Sex == 1)
popsM <- filter(pops,Sex==1)
# join deaths to pops
dfM <- left_join(popsM,deathsM, by = c("RGN09CD","RGN09NM","AgeBand")) %>%
mutate(RGN09CD = as.character(RGN09CD)) %>%
group_by(RGN09CD)
# execute phe_dsr function
outputM <- phe_dsr(dfM,Dths, Pop, stdpop = esp2013[1:15], type="full")
# compare to fingertips data for males
expect_equal(data.frame(phe_dsr(dfM,Dths, Pop, stdpop = esp2013[1:15], type="full")[1:6]),
data.frame(select(filter(fdata,Sex==1),2,7,6,8,9,10)),check.attributes=FALSE, check.names=FALSE)
x <- covr::package_coverage()
covr::zero_coverage(x)
library(PHEstatmethods)
dvetools::use_data_raw
devtools::use_data_raw
devtools::check()
?phe_dsr
library(dplyr)
df <- data.frame(indicatorid = rep(c(1234, 5678, 91011, 121314), each = 19 * 2 * 5),
year = rep(2006:2010, each = 19 * 2),
sex = rep(rep(c("Male", "Female"), each = 19), 5),
ageband = rep(c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90), times = 10),
obs = sample(200, 19 * 2 * 5 * 4, replace = TRUE),
pop = sample(10000:20000, 19 * 2 * 5 * 4, replace = TRUE))
df %>%
group_by(indicatorid, year, sex) %>%
phe_dsr(df, obs, pop)
View(df)
df %>%
group_by(indicatorid,year,sex)
df <- group_by(df,indicatorid,year,sex)
phe_dsr(df, obs, pop, type = "full")
df <- data.frame(indicatorid = rep(c(1234, 5678, 91011, 121314), each = 19 * 2 * 5),
year = rep(2006:2010, each = 19 * 2),
sex = rep(rep(c("Male", "Female"), each = 19), 5),
ageband = rep(c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90), times = 10),
obs = sample(200, 19 * 2 * 5 * 4, replace = TRUE),
pop = sample(10000:20000, 19 * 2 * 5 * 4, replace = TRUE))
df %>%
group_by(indicatorid,year,sex) %>%
phe_dsr(obs,pop)
df <- data.frame(indicatorid = rep(c(1234, 5678, 91011, 121314), each = 19 * 2 * 5),
year = rep(2006:2010, each = 19 * 2),
sex = rep(rep(c("Male", "Female"), each = 19), 5),
ageband = rep(c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90), times = 10),
obs = sample(200, 19 * 2 * 5 * 4, replace = TRUE),
pop = sample(10000:20000, 19 * 2 * 5 * 4, replace = TRUE))
df %>%
group_by(indicatorid, year, sex) %>%
phe_dsr(obs, pop)
df <- data.frame(indicatorid = rep(c(1234, 5678, 91011, 121314), each = 19 * 2 * 5),
year = rep(2006:2010, each = 19 * 2),
sex = rep(rep(c("Male", "Female"), each = 19), 5),
ageband = rep(c(0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90), times = 10),
obs = sample(200, 19 * 2 * 5 * 4, replace = TRUE),
pop = sample(10000:20000, 19 * 2 * 5 * 4, replace = TRUE))
df %>%
group_by(indicatorid, year, sex) %>%
phe_dsr(obs, pop, type = "full")
document()
devtools::document()
devtools::check()
devtools::check()
?zscore
??zscore
devtools::check()
devtools::test()
devtools::test()
x <- covr::package_coverage()
covr::zero_coverage(x)
devtools::test()
expect_equal(data.frame(lowercl = wilson_lower(c(65,1045,0.445),c(100,5000,1))),
data.frame(slice(test_BW,7:9)[3]),check.attributes=FALSE, check.names=FALSE, info="test default")
library(dplyr)
library(testthat)
expect_equal(data.frame(lowercl = wilson_lower(c(65,1045,0.445),c(100,5000,1))),
data.frame(slice(test_BW,7:9)[3]),check.attributes=FALSE, check.names=FALSE, info="test default")
expect_equal(data.frame(lowercl = wilson_lower(c(65,1045,0.445),c(100,5000,1),confidence=99.8)),
data.frame(slice(test_BW,10:12)[3]),check.attributes=FALSE, check.names=FALSE, info="test default")
expect_equal(data.frame(lowercl = wilson_upper(c(65,1045,0.445),c(100,5000,1))),
data.frame(slice(test_BW,7:9)[4]),check.attributes=FALSE, check.names=FALSE, info="test default")
expect_equal(data.frame(lowercl = wilson_upper(c(65,1045,0.445),c(100,5000,1),confidence=0.998)),
data.frame(slice(test_BW,10:12)[4]),check.attributes=FALSE, check.names=FALSE, info="test default")
expect_error(wilson_lower(c(65,0,-4),c(100,5000,1)),
"observed events must all be greater than or equal to zero", info="error obs < 0")
expect_error(wilson_lower(c(65,80,1000),c(100,5000,0)),
"sample sizes must all be greater than zero", info="error pop <= 0")
expect_error(wilson_lower(c(65,80,1000),c(100,5000,-6)),
"sample sizes must all be greater than zero", info="error pop <= 0")
expect_error(wilson_lower(c(65,0,-4),c(100,5000,1)),
"observed events must all be greater than or equal to zero", info="wilson_lower error obs < 0")
expect_error(wilson_lower(c(65,80,1000),c(100,5000,-6)),
"sample sizes must all be greater than zero", info="wilson_lower error pop <= 0")
expect_error(wilson_lower(c(65,80,1000),c(100,5000,1), confidence = 0.7),
"confidence level must be between 90 and 100 or between 0.9 and 1", info="wilson_lower error confidence < 0.9")
expect_error(wilson_lower(c(65,80,1000),c(100,5000,1), confidence = 14),
"confidence level must be between 90 and 100 or between 0.9 and 1", info="wilson_lower error confidence between 1 and 90")
expect_error(wilson_lower(c(65,80,1000),c(100,5000,1), confidence = 125),
"confidence level must be between 90 and 100 or between 0.9 and 1", info="wilson_lower error confidence > 100")
expect_error(wilson_upper(c(65,0,-4),c(100,5000,1)),
"observed events must all be greater than or equal to zero", info="wilson_upper error obs < 0")
expect_error(wilson_upper(c(65,80,1000),c(100,5000,-6)),
"sample sizes must all be greater than zero", info="wilson_upper error pop <= 0")
expect_error(wilson_upper(c(65,80,1000),c(100,5000,1), confidence = 0.7),
"confidence level must be between 90 and 100 or between 0.9 and 1", info="wilson_upper error confidence < 0.9")
expect_error(wilson_upper(c(65,80,1000),c(100,5000,1), confidence = 14),
"confidence level must be between 90 and 100 or between 0.9 and 1", info="wilson_upper error confidence between 1 and 90")
expect_error(wilson_upper(c(65,80,1000),c(100,5000,1), confidence = 125),
"confidence level must be between 90 and 100 or between 0.9 and 1", info="wilson_upper error confidence > 100")
wilson_lower(c(65,80,1000),c(100,5000,0))
wilson_lower(c(65,80,0),c(100,5000,0))
# create function to calculate Wilson's lower CI limit
wilson_lower <- function(x, n, confidence = 0.95) {
# validate arguments
if (any(x < 0)) {
stop("observed events must all be greater than or equal to zero")
} else if (any(n < 0)) {
stop("sample sizes must all be greater than zero")
} else if (any(x > n)) {
stop("numerators must be less than or equal to denominator for a Wilson score to be calculated")
} else if ((confidence<0.9)|(confidence >1 & confidence <90)|(confidence > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
}
# scale confidence level
if (confidence >= 90) {
confidence <- confidence/100
}
# set z
z <- qnorm(confidence+(1-confidence)/2)
# calculate
wilson_lower <- (2*x+z^2-z*sqrt(z^2+4*x*(1-(x/n))))/2/(n+z^2)
return(wilson_lower)
}
# -------------------------------------------------------------------------------------------------
#' wilson_upper
#'
#' Calculates upper confidence limit for an observed number of events using Wilson's method.
#'
#' @param x the observed number of cases in the sample meeting the required condition; numeric vector; no default
#' @param n the number of cases in the sample; numeric vector; no default
#' @inheritParams phe_dsr
#'
#' @return Returns an upper confidence limit for an observed number of events using Wilson's method
#'
#' @examples
#' wilson_upper(65)
#' wilson_upper(65,99.8)
#'
#' @export
#'
#' @family PHEstatmethods package functions
# -------------------------------------------------------------------------------------------------
# create function to calculate Wilson's lower CI limit
wilson_upper <- function(x, n, confidence = 0.95) {
# validate arguments
if (any(x < 0)) {
stop("observed events must all be greater than or equal to zero")
} else if (any(n < 0)) {
stop("sample sizes must all be greater than zero")
} else if ((confidence<0.9)|(confidence >1 & confidence <90)|(confidence > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
}
# scale confidence level
if (confidence >= 90) {
confidence <- confidence/100
}
# set z
z <- qnorm(confidence+(1-confidence)/2)
# calculate
wilson_upper <- (2*x+z^2+z*sqrt(z^2+4*x*(1-(x/n))))/2/(n+z^2)
return(wilson_upper)
}
wilson_lower(c(65,80,0),c(100,5000,0))
wilson_lower(c(65,80,1000),c(100,5000,0))
phe_rate(data.frame(obs = c(65,80,1000), pop = c(100,5000,0)),obs,pop)
# create function to calculate Wilson's lower CI limit
wilson_upper <- function(x, n, confidence = 0.95) {
# validate arguments
if (any(x < 0)) {
stop("observed events must all be greater than or equal to zero")
} else if (any(n < 0)) {
stop("sample sizes must all be greater than zero")
} else if (any(x > n)) {
stop("numerators must be less than or equal to denominator for a Wilson score to be calculated")
} else if ((confidence<0.9)|(confidence >1 & confidence <90)|(confidence > 100)) {
stop("confidence level must be between 90 and 100 or between 0.9 and 1")
}
# scale confidence level
if (confidence >= 90) {
confidence <- confidence/100
}
# set z
z <- qnorm(confidence+(1-confidence)/2)
# calculate
wilson_upper <- (2*x+z^2+z*sqrt(z^2+4*x*(1-(x/n))))/2/(n+z^2)
return(wilson_upper)
}
expect_error(wilson_lower(c(65,80,1000),c(100,50,5000)),
"numerators must be less than or equal to denominator for a Wilson score to be calculated", info="wilson_lower error pop <= 0")
wilson_lower(c(65,80,1000),c(100,50,5000))
